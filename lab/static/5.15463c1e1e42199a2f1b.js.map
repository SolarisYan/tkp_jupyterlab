{"version":3,"sources":["webpack:///./node_modules/monaco-editor/esm/vs/language/json/workerManager.js","webpack:///./node_modules/monaco-editor/esm/vs/language/json/_deps/vscode-languageserver-types/main.js","webpack:///./node_modules/monaco-editor/esm/vs/language/json/languageFeatures.js","webpack:///./node_modules/monaco-editor/esm/vs/language/json/_deps/jsonc-parser/impl/scanner.js","webpack:///./node_modules/monaco-editor/esm/vs/language/json/_deps/jsonc-parser/impl/format.js","webpack:///./node_modules/monaco-editor/esm/vs/language/json/_deps/jsonc-parser/impl/parser.js","webpack:///./node_modules/monaco-editor/esm/vs/language/json/_deps/jsonc-parser/impl/edit.js","webpack:///./node_modules/monaco-editor/esm/vs/language/json/_deps/jsonc-parser/main.js","webpack:///./node_modules/monaco-editor/esm/vs/language/json/tokenization.js","webpack:///./node_modules/monaco-editor/esm/vs/language/json/jsonMode.js"],"names":["Promise","monaco","STOP_WHEN_IDLE_FOR","WorkerManager","defaults","_this","this","_defaults","_worker","_idleCheckInterval","setInterval","_checkIfIdle","_lastUsedTime","_configChangeListener","onDidChange","_stopWorker","prototype","dispose","_client","clearInterval","timePassedSinceLastUsed","Date","now","_getClient","editor","createWebWorker","moduleId","label","languageId","createData","languageSettings","diagnosticsOptions","getProxy","getLanguageServiceWorker","resources","_i","arguments","length","toShallowCancelPromise","then","client","_","withSyncedResources","p","completeCallback","errorCallback","r","c","e","Position","create","line","character","is","value","candidate","Is","defined","number","Range","one","two","three","four","start","end","Error","Location","uri","range","string","undefined","DiagnosticSeverity","Warning","Information","Hint","Diagnostic","message","severity","code","source","result","Command","title","command","args","TextEdit","replace","newText","insert","position","del","TextDocumentEdit","textDocument","edits","VersionedTextDocumentIdentifier","Array","isArray","TextEditChangeImpl","push","delete","add","edit","all","clear","splice","WorkspaceChange","workspaceEdit","_textEditChanges","Object","_workspaceEdit","documentChanges","forEach","textDocumentEdit","textEditChange","changes","keys","key","defineProperty","get","enumerable","configurable","getTextEditChange","TextDocumentIdentifier","version","TextDocumentItem","text","MarkupKind","PlainText","Markdown","CompletionItemKind","Text","Method","Function","Constructor","Field","Variable","Class","Interface","Module","Property","Unit","Value","Enum","Keyword","Snippet","Color","File","Reference","Folder","EnumMember","Constant","Struct","Event","Operator","TypeParameter","InsertTextFormat","CompletionItem","CompletionList","items","isIncomplete","MarkedString","fromPlainText","plainText","ParameterInformation","documentation","SignatureInformation","parameters","DocumentHighlightKind","Read","Write","DocumentHighlight","kind","SymbolKind","Namespace","Package","String","Number","Boolean","Key","Null","SymbolInformation","name","containerName","location","CodeActionContext","diagnostics","typedArray","CodeLens","data","FormattingOptions","tabSize","insertSpaces","boolean","DocumentLink","target","EOL","TextDocument","content","FullTextDocument","lineCount","func","getText","positionAt","offsetAt","applyEdits","document","sortedEdits","mergeSort","a","b","diff","lastModifiedOffset","i","startOffset","endOffset","substring","compare","left","slice","right","leftIdx","rightIdx","ret","TextDocumentSaveReason","Manual","AfterDelay","FocusOut","_uri","_languageId","_version","_content","_lineOffsets","update","event","getLineOffsets","lineOffsets","isLineStart","ch","charAt","offset","Math","max","min","low","high","mid","floor","lineOffset","nextLineOffset","toString","call","check","every","Uri","languageFeatures_Range","DiagnosticsAdapter","_disposables","_listener","onModelAdd","model","modeId","getModeId","handle","onDidChangeContent","clearTimeout","setTimeout","_doValidate","onModelRemoved","setModelMarkers","uriStr","listener","onDidCreateModel","onWillDisposeModel","_resetSchema","onDidChangeModelLanguage","getModels","d","resource","worker","resetSchema","doValidation","markers","map","toDiagnostics","getModel","err","console","error","toSeverity","lsSeverity","MarkerSeverity","Info","diag","startLineNumber","startColumn","endLineNumber","endColumn","fromPosition","column","lineNumber","fromRange","toRange","toCompletionItemKind","mItemKind","languages","fromCompletionItemKind","toTextEdit","textEdit","toCompletionItem","entry","insertText","sortText","filterText","detail","fromMarkdownString","fromCompletionItem","item","insertTextFormat","languageFeatures_CompletionAdapter","CompletionAdapter","provideCompletionItems","token","wordInfo","getWordUntilPosition","wireCancellationToken","doComplete","info","isMarkupContent","thing","toMarkdownString","language","toMarkedStringArray","contents","HoverAdapter","provideHover","doHover","toLocation","parse","toSymbolKind","mKind","DocumentSymbolAdapter","provideDocumentSymbols","findDocumentSymbols","fromFormattingOptions","options","DocumentFormattingEditProvider","provideDocumentFormattingEdits","format","DocumentRangeFormattingEditProvider","provideDocumentRangeFormattingEdits","DocumentColorAdapter","provideDocumentColors","findDocumentColors","infos","color","provideColorPresentations","getColorPresentations","presentations","presentation","additionalTextEdits","promise","cancel","onCancellationRequested","createScanner","ignoreTrivia","pos","len","tokenOffset","scanError","scanHexDigits","count","exact","digits","charCodeAt","setPosition","newPosition","scanNumber","isDigit","scanString","ch_1","fromCharCode","isLineBreak","scanNext","isWhiteSpace","commentClosed","isUnknownContentCharacter","scanNextNonTrivia","getPosition","scan","getToken","getTokenValue","getTokenOffset","getTokenLength","getTokenError","documentText","initialIndentLevel","formatText","formatTextStart","rangeStart","rangeEnd","isEOL","computeIndentLevel","eol","getEOL","lineBreak","indentLevel","indentValue","repeat","scanner","hasError","newLineAndIndent","editOperations","addEdit","firstToken","firstTokenStart","initialIndent","firstTokenEnd","secondToken","replaceContent","commentTokenStart","secondTokenStart","s","nChars","indexOf","getLocation","segments","earlyReturnException","previousNode","previousNodeInst","type","isAtPropertyKey","setPreviousNode","columnOffset","visit","onObjectBegin","onObjectProperty","onObjectEnd","pop","onArrayBegin","onArrayEnd","onLiteralValue","getLiteralNodeType","onSeparator","sep","last","path","matches","pattern","k","errors","currentProperty","currentParent","previousParents","onValue","visitor","object","array","onError","parseTree","children","ensurePropertyComplete","parent","valueNode","findNodeAtLocation","root","node","path_1","segment","found","_a","_b","propertyNode","index","getNodeValue","obj","prop","_scanner","toNoArgVisit","visitFunction","toOneArgVisit","arg","onComment","disallowComments","allowTrailingComma","handleError","skipUntilAfter","skipUntil","parseString","isValue","parseLiteral","JSON","parseProperty","parseValue","parseObject","needsComma","parseArray","stripComments","replaceCh","parts","join","removeProperty","formattingOptions","setProperty","getInsertionIndex","lastSegment","withFormatting","stringify","existing","propertyIndex","removeBegin","removeEnd","previous","next","newProperty","insertIndex","removalIndex","toRemove","parentEndOffset","applyEdit","begin","edit_1","editLength","isWS","main_createScanner","main_getLocation","main_parse","main_parseTree","main_findNodeAtLocation","main_getNodeValue","main_visit","main_stripComments","main_format","modify","createTokenizationSupport","supportComments","getInitialState","JSONState","tokenize","state","offsetDelta","stopAtOffset","TOKEN_DELIM_OBJECT","TOKEN_DELIM_ARRAY","TOKEN_DELIM_COLON","TOKEN_DELIM_COMMA","TOKEN_VALUE_BOOLEAN","TOKEN_VALUE_NULL","TOKEN_VALUE_STRING","TOKEN_VALUE_NUMBER","TOKEN_PROPERTY_NAME","TOKEN_COMMENT_BLOCK","TOKEN_COMMENT_LINE","lastWasColon","_state","clone","equals","other","getStateData","setStateData","comments","numberOfInsertedCharacters","adjustOffset","tokens","endState","substr","startIndex","scopes","__webpack_require__","__webpack_exports__","setupMode","disposables","uris","apply","registerCompletionItemProvider","registerHoverProvider","registerDocumentSymbolProvider","registerDocumentFormattingEditProvider","registerDocumentRangeFormattingEditProvider","setTokensProvider","setLanguageConfiguration","richEditConfiguration","registerColorProvider","wordPattern","lineComment","blockComment","brackets","autoClosingPairs","open","close","notIn"],"mappings":"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","file":"5.15463c1e1e42199a2f1b.js","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n'use strict';\nvar Promise = monaco.Promise;\nvar STOP_WHEN_IDLE_FOR = 2 * 60 * 1000; // 2min\nvar WorkerManager = /** @class */ (function () {\n    function WorkerManager(defaults) {\n        var _this = this;\n        this._defaults = defaults;\n        this._worker = null;\n        this._idleCheckInterval = setInterval(function () { return _this._checkIfIdle(); }, 30 * 1000);\n        this._lastUsedTime = 0;\n        this._configChangeListener = this._defaults.onDidChange(function () { return _this._stopWorker(); });\n    }\n    WorkerManager.prototype._stopWorker = function () {\n        if (this._worker) {\n            this._worker.dispose();\n            this._worker = null;\n        }\n        this._client = null;\n    };\n    WorkerManager.prototype.dispose = function () {\n        clearInterval(this._idleCheckInterval);\n        this._configChangeListener.dispose();\n        this._stopWorker();\n    };\n    WorkerManager.prototype._checkIfIdle = function () {\n        if (!this._worker) {\n            return;\n        }\n        var timePassedSinceLastUsed = Date.now() - this._lastUsedTime;\n        if (timePassedSinceLastUsed > STOP_WHEN_IDLE_FOR) {\n            this._stopWorker();\n        }\n    };\n    WorkerManager.prototype._getClient = function () {\n        this._lastUsedTime = Date.now();\n        if (!this._client) {\n            this._worker = monaco.editor.createWebWorker({\n                // module that exports the create() method and returns a `JSONWorker` instance\n                moduleId: 'vs/language/json/jsonWorker',\n                label: this._defaults.languageId,\n                // passed in to the create() method\n                createData: {\n                    languageSettings: this._defaults.diagnosticsOptions,\n                    languageId: this._defaults.languageId\n                }\n            });\n            this._client = this._worker.getProxy();\n        }\n        return this._client;\n    };\n    WorkerManager.prototype.getLanguageServiceWorker = function () {\n        var _this = this;\n        var resources = [];\n        for (var _i = 0; _i < arguments.length; _i++) {\n            resources[_i] = arguments[_i];\n        }\n        var _client;\n        return toShallowCancelPromise(this._getClient().then(function (client) {\n            _client = client;\n        }).then(function (_) {\n            return _this._worker.withSyncedResources(resources);\n        }).then(function (_) { return _client; }));\n    };\n    return WorkerManager;\n}());\nexport { WorkerManager };\nfunction toShallowCancelPromise(p) {\n    var completeCallback;\n    var errorCallback;\n    var r = new Promise(function (c, e) {\n        completeCallback = c;\n        errorCallback = e;\n    }, function () { });\n    p.then(completeCallback, errorCallback);\n    return r;\n}\n","/* --------------------------------------------------------------------------------------------\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Licensed under the MIT License. See License.txt in the project root for license information.\n * ------------------------------------------------------------------------------------------ */\n'use strict';\n/**\n * The Position namespace provides helper functions to work with\n * [Position](#Position) literals.\n */\nexport var Position;\n(function (Position) {\n    /**\n     * Creates a new Position literal from the given line and character.\n     * @param line The position's line.\n     * @param character The position's character.\n     */\n    function create(line, character) {\n        return { line: line, character: character };\n    }\n    Position.create = create;\n    /**\n     * Checks whether the given liternal conforms to the [Position](#Position) interface.\n     */\n    function is(value) {\n        var candidate = value;\n        return Is.defined(candidate) && Is.number(candidate.line) && Is.number(candidate.character);\n    }\n    Position.is = is;\n})(Position || (Position = {}));\n/**\n * The Range namespace provides helper functions to work with\n * [Range](#Range) literals.\n */\nexport var Range;\n(function (Range) {\n    function create(one, two, three, four) {\n        if (Is.number(one) && Is.number(two) && Is.number(three) && Is.number(four)) {\n            return { start: Position.create(one, two), end: Position.create(three, four) };\n        }\n        else if (Position.is(one) && Position.is(two)) {\n            return { start: one, end: two };\n        }\n        else {\n            throw new Error(\"Range#create called with invalid arguments[\" + one + \", \" + two + \", \" + three + \", \" + four + \"]\");\n        }\n    }\n    Range.create = create;\n    /**\n     * Checks whether the given literal conforms to the [Range](#Range) interface.\n     */\n    function is(value) {\n        var candidate = value;\n        return Is.defined(candidate) && Position.is(candidate.start) && Position.is(candidate.end);\n    }\n    Range.is = is;\n})(Range || (Range = {}));\n/**\n * The Location namespace provides helper functions to work with\n * [Location](#Location) literals.\n */\nexport var Location;\n(function (Location) {\n    /**\n     * Creates a Location literal.\n     * @param uri The location's uri.\n     * @param range The location's range.\n     */\n    function create(uri, range) {\n        return { uri: uri, range: range };\n    }\n    Location.create = create;\n    /**\n     * Checks whether the given literal conforms to the [Location](#Location) interface.\n     */\n    function is(value) {\n        var candidate = value;\n        return Is.defined(candidate) && Range.is(candidate.range) && (Is.string(candidate.uri) || Is.undefined(candidate.uri));\n    }\n    Location.is = is;\n})(Location || (Location = {}));\n/**\n * The diagnostic's serverity.\n */\nexport var DiagnosticSeverity;\n(function (DiagnosticSeverity) {\n    /**\n     * Reports an error.\n     */\n    DiagnosticSeverity.Error = 1;\n    /**\n     * Reports a warning.\n     */\n    DiagnosticSeverity.Warning = 2;\n    /**\n     * Reports an information.\n     */\n    DiagnosticSeverity.Information = 3;\n    /**\n     * Reports a hint.\n     */\n    DiagnosticSeverity.Hint = 4;\n})(DiagnosticSeverity || (DiagnosticSeverity = {}));\n/**\n * The Diagnostic namespace provides helper functions to work with\n * [Diagnostic](#Diagnostic) literals.\n */\nexport var Diagnostic;\n(function (Diagnostic) {\n    /**\n     * Creates a new Diagnostic literal.\n     */\n    function create(range, message, severity, code, source) {\n        var result = { range: range, message: message };\n        if (Is.defined(severity)) {\n            result.severity = severity;\n        }\n        if (Is.defined(code)) {\n            result.code = code;\n        }\n        if (Is.defined(source)) {\n            result.source = source;\n        }\n        return result;\n    }\n    Diagnostic.create = create;\n    /**\n     * Checks whether the given literal conforms to the [Diagnostic](#Diagnostic) interface.\n     */\n    function is(value) {\n        var candidate = value;\n        return Is.defined(candidate)\n            && Range.is(candidate.range)\n            && Is.string(candidate.message)\n            && (Is.number(candidate.severity) || Is.undefined(candidate.severity))\n            && (Is.number(candidate.code) || Is.string(candidate.code) || Is.undefined(candidate.code))\n            && (Is.string(candidate.source) || Is.undefined(candidate.source));\n    }\n    Diagnostic.is = is;\n})(Diagnostic || (Diagnostic = {}));\n/**\n * The Command namespace provides helper functions to work with\n * [Command](#Command) literals.\n */\nexport var Command;\n(function (Command) {\n    /**\n     * Creates a new Command literal.\n     */\n    function create(title, command) {\n        var args = [];\n        for (var _i = 2; _i < arguments.length; _i++) {\n            args[_i - 2] = arguments[_i];\n        }\n        var result = { title: title, command: command };\n        if (Is.defined(args) && args.length > 0) {\n            result.arguments = args;\n        }\n        return result;\n    }\n    Command.create = create;\n    /**\n     * Checks whether the given literal conforms to the [Command](#Command) interface.\n     */\n    function is(value) {\n        var candidate = value;\n        return Is.defined(candidate) && Is.string(candidate.title) && Is.string(candidate.title);\n    }\n    Command.is = is;\n})(Command || (Command = {}));\n/**\n * The TextEdit namespace provides helper function to create replace,\n * insert and delete edits more easily.\n */\nexport var TextEdit;\n(function (TextEdit) {\n    /**\n     * Creates a replace text edit.\n     * @param range The range of text to be replaced.\n     * @param newText The new text.\n     */\n    function replace(range, newText) {\n        return { range: range, newText: newText };\n    }\n    TextEdit.replace = replace;\n    /**\n     * Creates a insert text edit.\n     * @param position The position to insert the text at.\n     * @param newText The text to be inserted.\n     */\n    function insert(position, newText) {\n        return { range: { start: position, end: position }, newText: newText };\n    }\n    TextEdit.insert = insert;\n    /**\n     * Creates a delete text edit.\n     * @param range The range of text to be deleted.\n     */\n    function del(range) {\n        return { range: range, newText: '' };\n    }\n    TextEdit.del = del;\n})(TextEdit || (TextEdit = {}));\n/**\n * The TextDocumentEdit namespace provides helper function to create\n * an edit that manipulates a text document.\n */\nexport var TextDocumentEdit;\n(function (TextDocumentEdit) {\n    /**\n     * Creates a new `TextDocumentEdit`\n     */\n    function create(textDocument, edits) {\n        return { textDocument: textDocument, edits: edits };\n    }\n    TextDocumentEdit.create = create;\n    function is(value) {\n        var candidate = value;\n        return Is.defined(candidate)\n            && VersionedTextDocumentIdentifier.is(candidate.textDocument)\n            && Array.isArray(candidate.edits);\n    }\n    TextDocumentEdit.is = is;\n})(TextDocumentEdit || (TextDocumentEdit = {}));\nvar TextEditChangeImpl = /** @class */ (function () {\n    function TextEditChangeImpl(edits) {\n        this.edits = edits;\n    }\n    TextEditChangeImpl.prototype.insert = function (position, newText) {\n        this.edits.push(TextEdit.insert(position, newText));\n    };\n    TextEditChangeImpl.prototype.replace = function (range, newText) {\n        this.edits.push(TextEdit.replace(range, newText));\n    };\n    TextEditChangeImpl.prototype.delete = function (range) {\n        this.edits.push(TextEdit.del(range));\n    };\n    TextEditChangeImpl.prototype.add = function (edit) {\n        this.edits.push(edit);\n    };\n    TextEditChangeImpl.prototype.all = function () {\n        return this.edits;\n    };\n    TextEditChangeImpl.prototype.clear = function () {\n        this.edits.splice(0, this.edits.length);\n    };\n    return TextEditChangeImpl;\n}());\n/**\n * A workspace change helps constructing changes to a workspace.\n */\nvar WorkspaceChange = /** @class */ (function () {\n    function WorkspaceChange(workspaceEdit) {\n        var _this = this;\n        this._textEditChanges = Object.create(null);\n        if (workspaceEdit) {\n            this._workspaceEdit = workspaceEdit;\n            if (workspaceEdit.documentChanges) {\n                workspaceEdit.documentChanges.forEach(function (textDocumentEdit) {\n                    var textEditChange = new TextEditChangeImpl(textDocumentEdit.edits);\n                    _this._textEditChanges[textDocumentEdit.textDocument.uri] = textEditChange;\n                });\n            }\n            else if (workspaceEdit.changes) {\n                Object.keys(workspaceEdit.changes).forEach(function (key) {\n                    var textEditChange = new TextEditChangeImpl(workspaceEdit.changes[key]);\n                    _this._textEditChanges[key] = textEditChange;\n                });\n            }\n        }\n    }\n    Object.defineProperty(WorkspaceChange.prototype, \"edit\", {\n        /**\n         * Returns the underlying [WorkspaceEdit](#WorkspaceEdit) literal\n         * use to be returned from a workspace edit operation like rename.\n         */\n        get: function () {\n            return this._workspaceEdit;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    WorkspaceChange.prototype.getTextEditChange = function (key) {\n        if (VersionedTextDocumentIdentifier.is(key)) {\n            if (!this._workspaceEdit) {\n                this._workspaceEdit = {\n                    documentChanges: []\n                };\n            }\n            if (!this._workspaceEdit.documentChanges) {\n                throw new Error('Workspace edit is not configured for versioned document changes.');\n            }\n            var textDocument = key;\n            var result = this._textEditChanges[textDocument.uri];\n            if (!result) {\n                var edits = [];\n                var textDocumentEdit = {\n                    textDocument: textDocument,\n                    edits: edits\n                };\n                this._workspaceEdit.documentChanges.push(textDocumentEdit);\n                result = new TextEditChangeImpl(edits);\n                this._textEditChanges[textDocument.uri] = result;\n            }\n            return result;\n        }\n        else {\n            if (!this._workspaceEdit) {\n                this._workspaceEdit = {\n                    changes: Object.create(null)\n                };\n            }\n            if (!this._workspaceEdit.changes) {\n                throw new Error('Workspace edit is not configured for normal text edit changes.');\n            }\n            var result = this._textEditChanges[key];\n            if (!result) {\n                var edits = [];\n                this._workspaceEdit.changes[key] = edits;\n                result = new TextEditChangeImpl(edits);\n                this._textEditChanges[key] = result;\n            }\n            return result;\n        }\n    };\n    return WorkspaceChange;\n}());\nexport { WorkspaceChange };\n/**\n * The TextDocumentIdentifier namespace provides helper functions to work with\n * [TextDocumentIdentifier](#TextDocumentIdentifier) literals.\n */\nexport var TextDocumentIdentifier;\n(function (TextDocumentIdentifier) {\n    /**\n     * Creates a new TextDocumentIdentifier literal.\n     * @param uri The document's uri.\n     */\n    function create(uri) {\n        return { uri: uri };\n    }\n    TextDocumentIdentifier.create = create;\n    /**\n     * Checks whether the given literal conforms to the [TextDocumentIdentifier](#TextDocumentIdentifier) interface.\n     */\n    function is(value) {\n        var candidate = value;\n        return Is.defined(candidate) && Is.string(candidate.uri);\n    }\n    TextDocumentIdentifier.is = is;\n})(TextDocumentIdentifier || (TextDocumentIdentifier = {}));\n/**\n * The VersionedTextDocumentIdentifier namespace provides helper functions to work with\n * [VersionedTextDocumentIdentifier](#VersionedTextDocumentIdentifier) literals.\n */\nexport var VersionedTextDocumentIdentifier;\n(function (VersionedTextDocumentIdentifier) {\n    /**\n     * Creates a new VersionedTextDocumentIdentifier literal.\n     * @param uri The document's uri.\n     * @param uri The document's text.\n     */\n    function create(uri, version) {\n        return { uri: uri, version: version };\n    }\n    VersionedTextDocumentIdentifier.create = create;\n    /**\n     * Checks whether the given literal conforms to the [VersionedTextDocumentIdentifier](#VersionedTextDocumentIdentifier) interface.\n     */\n    function is(value) {\n        var candidate = value;\n        return Is.defined(candidate) && Is.string(candidate.uri) && Is.number(candidate.version);\n    }\n    VersionedTextDocumentIdentifier.is = is;\n})(VersionedTextDocumentIdentifier || (VersionedTextDocumentIdentifier = {}));\n/**\n * The TextDocumentItem namespace provides helper functions to work with\n * [TextDocumentItem](#TextDocumentItem) literals.\n */\nexport var TextDocumentItem;\n(function (TextDocumentItem) {\n    /**\n     * Creates a new TextDocumentItem literal.\n     * @param uri The document's uri.\n     * @param languageId The document's language identifier.\n     * @param version The document's version number.\n     * @param text The document's text.\n     */\n    function create(uri, languageId, version, text) {\n        return { uri: uri, languageId: languageId, version: version, text: text };\n    }\n    TextDocumentItem.create = create;\n    /**\n     * Checks whether the given literal conforms to the [TextDocumentItem](#TextDocumentItem) interface.\n     */\n    function is(value) {\n        var candidate = value;\n        return Is.defined(candidate) && Is.string(candidate.uri) && Is.string(candidate.languageId) && Is.number(candidate.version) && Is.string(candidate.text);\n    }\n    TextDocumentItem.is = is;\n})(TextDocumentItem || (TextDocumentItem = {}));\n/**\n * Describes the content type that a client supports in various\n * result literals like `Hover`, `ParameterInfo` or `CompletionItem`.\n *\n * Please note that `MarkupKinds` must not start with a `$`. This kinds\n * are reserved for internal usage.\n */\nexport var MarkupKind;\n(function (MarkupKind) {\n    /**\n     * Plain text is supported as a content format\n     */\n    MarkupKind.PlainText = 'plaintext';\n    /**\n     * Markdown is supported as a content format\n     */\n    MarkupKind.Markdown = 'markdown';\n})(MarkupKind || (MarkupKind = {}));\n/**\n * The kind of a completion entry.\n */\nexport var CompletionItemKind;\n(function (CompletionItemKind) {\n    CompletionItemKind.Text = 1;\n    CompletionItemKind.Method = 2;\n    CompletionItemKind.Function = 3;\n    CompletionItemKind.Constructor = 4;\n    CompletionItemKind.Field = 5;\n    CompletionItemKind.Variable = 6;\n    CompletionItemKind.Class = 7;\n    CompletionItemKind.Interface = 8;\n    CompletionItemKind.Module = 9;\n    CompletionItemKind.Property = 10;\n    CompletionItemKind.Unit = 11;\n    CompletionItemKind.Value = 12;\n    CompletionItemKind.Enum = 13;\n    CompletionItemKind.Keyword = 14;\n    CompletionItemKind.Snippet = 15;\n    CompletionItemKind.Color = 16;\n    CompletionItemKind.File = 17;\n    CompletionItemKind.Reference = 18;\n    CompletionItemKind.Folder = 19;\n    CompletionItemKind.EnumMember = 20;\n    CompletionItemKind.Constant = 21;\n    CompletionItemKind.Struct = 22;\n    CompletionItemKind.Event = 23;\n    CompletionItemKind.Operator = 24;\n    CompletionItemKind.TypeParameter = 25;\n})(CompletionItemKind || (CompletionItemKind = {}));\n/**\n * Defines whether the insert text in a completion item should be interpreted as\n * plain text or a snippet.\n */\nexport var InsertTextFormat;\n(function (InsertTextFormat) {\n    /**\n     * The primary text to be inserted is treated as a plain string.\n     */\n    InsertTextFormat.PlainText = 1;\n    /**\n     * The primary text to be inserted is treated as a snippet.\n     *\n     * A snippet can define tab stops and placeholders with `$1`, `$2`\n     * and `${3:foo}`. `$0` defines the final tab stop, it defaults to\n     * the end of the snippet. Placeholders with equal identifiers are linked,\n     * that is typing in one will update others too.\n     *\n     * See also: https://github.com/Microsoft/vscode/blob/master/src/vs/editor/contrib/snippet/common/snippet.md\n     */\n    InsertTextFormat.Snippet = 2;\n})(InsertTextFormat || (InsertTextFormat = {}));\n/**\n * The CompletionItem namespace provides functions to deal with\n * completion items.\n */\nexport var CompletionItem;\n(function (CompletionItem) {\n    /**\n     * Create a completion item and seed it with a label.\n     * @param label The completion item's label\n     */\n    function create(label) {\n        return { label: label };\n    }\n    CompletionItem.create = create;\n})(CompletionItem || (CompletionItem = {}));\n/**\n * The CompletionList namespace provides functions to deal with\n * completion lists.\n */\nexport var CompletionList;\n(function (CompletionList) {\n    /**\n     * Creates a new completion list.\n     *\n     * @param items The completion items.\n     * @param isIncomplete The list is not complete.\n     */\n    function create(items, isIncomplete) {\n        return { items: items ? items : [], isIncomplete: !!isIncomplete };\n    }\n    CompletionList.create = create;\n})(CompletionList || (CompletionList = {}));\nexport var MarkedString;\n(function (MarkedString) {\n    /**\n     * Creates a marked string from plain text.\n     *\n     * @param plainText The plain text.\n     */\n    function fromPlainText(plainText) {\n        return plainText.replace(/[\\\\`*_{}[\\]()#+\\-.!]/g, \"\\\\$&\"); // escape markdown syntax tokens: http://daringfireball.net/projects/markdown/syntax#backslash\n    }\n    MarkedString.fromPlainText = fromPlainText;\n})(MarkedString || (MarkedString = {}));\n/**\n * The ParameterInformation namespace provides helper functions to work with\n * [ParameterInformation](#ParameterInformation) literals.\n */\nexport var ParameterInformation;\n(function (ParameterInformation) {\n    /**\n     * Creates a new parameter information literal.\n     *\n     * @param label A label string.\n     * @param documentation A doc string.\n     */\n    function create(label, documentation) {\n        return documentation ? { label: label, documentation: documentation } : { label: label };\n    }\n    ParameterInformation.create = create;\n    ;\n})(ParameterInformation || (ParameterInformation = {}));\n/**\n * The SignatureInformation namespace provides helper functions to work with\n * [SignatureInformation](#SignatureInformation) literals.\n */\nexport var SignatureInformation;\n(function (SignatureInformation) {\n    function create(label, documentation) {\n        var parameters = [];\n        for (var _i = 2; _i < arguments.length; _i++) {\n            parameters[_i - 2] = arguments[_i];\n        }\n        var result = { label: label };\n        if (Is.defined(documentation)) {\n            result.documentation = documentation;\n        }\n        if (Is.defined(parameters)) {\n            result.parameters = parameters;\n        }\n        else {\n            result.parameters = [];\n        }\n        return result;\n    }\n    SignatureInformation.create = create;\n})(SignatureInformation || (SignatureInformation = {}));\n/**\n * A document highlight kind.\n */\nexport var DocumentHighlightKind;\n(function (DocumentHighlightKind) {\n    /**\n     * A textual occurrance.\n     */\n    DocumentHighlightKind.Text = 1;\n    /**\n     * Read-access of a symbol, like reading a variable.\n     */\n    DocumentHighlightKind.Read = 2;\n    /**\n     * Write-access of a symbol, like writing to a variable.\n     */\n    DocumentHighlightKind.Write = 3;\n})(DocumentHighlightKind || (DocumentHighlightKind = {}));\n/**\n * DocumentHighlight namespace to provide helper functions to work with\n * [DocumentHighlight](#DocumentHighlight) literals.\n */\nexport var DocumentHighlight;\n(function (DocumentHighlight) {\n    /**\n     * Create a DocumentHighlight object.\n     * @param range The range the highlight applies to.\n     */\n    function create(range, kind) {\n        var result = { range: range };\n        if (Is.number(kind)) {\n            result.kind = kind;\n        }\n        return result;\n    }\n    DocumentHighlight.create = create;\n})(DocumentHighlight || (DocumentHighlight = {}));\n/**\n * A symbol kind.\n */\nexport var SymbolKind;\n(function (SymbolKind) {\n    SymbolKind.File = 1;\n    SymbolKind.Module = 2;\n    SymbolKind.Namespace = 3;\n    SymbolKind.Package = 4;\n    SymbolKind.Class = 5;\n    SymbolKind.Method = 6;\n    SymbolKind.Property = 7;\n    SymbolKind.Field = 8;\n    SymbolKind.Constructor = 9;\n    SymbolKind.Enum = 10;\n    SymbolKind.Interface = 11;\n    SymbolKind.Function = 12;\n    SymbolKind.Variable = 13;\n    SymbolKind.Constant = 14;\n    SymbolKind.String = 15;\n    SymbolKind.Number = 16;\n    SymbolKind.Boolean = 17;\n    SymbolKind.Array = 18;\n    SymbolKind.Object = 19;\n    SymbolKind.Key = 20;\n    SymbolKind.Null = 21;\n    SymbolKind.EnumMember = 22;\n    SymbolKind.Struct = 23;\n    SymbolKind.Event = 24;\n    SymbolKind.Operator = 25;\n    SymbolKind.TypeParameter = 26;\n})(SymbolKind || (SymbolKind = {}));\nexport var SymbolInformation;\n(function (SymbolInformation) {\n    /**\n     * Creates a new symbol information literal.\n     *\n     * @param name The name of the symbol.\n     * @param kind The kind of the symbol.\n     * @param range The range of the location of the symbol.\n     * @param uri The resource of the location of symbol, defaults to the current document.\n     * @param containerName The name of the symbol containg the symbol.\n     */\n    function create(name, kind, range, uri, containerName) {\n        var result = {\n            name: name,\n            kind: kind,\n            location: { uri: uri, range: range }\n        };\n        if (containerName) {\n            result.containerName = containerName;\n        }\n        return result;\n    }\n    SymbolInformation.create = create;\n})(SymbolInformation || (SymbolInformation = {}));\n/**\n * The CodeActionContext namespace provides helper functions to work with\n * [CodeActionContext](#CodeActionContext) literals.\n */\nexport var CodeActionContext;\n(function (CodeActionContext) {\n    /**\n     * Creates a new CodeActionContext literal.\n     */\n    function create(diagnostics) {\n        return { diagnostics: diagnostics };\n    }\n    CodeActionContext.create = create;\n    /**\n     * Checks whether the given literal conforms to the [CodeActionContext](#CodeActionContext) interface.\n     */\n    function is(value) {\n        var candidate = value;\n        return Is.defined(candidate) && Is.typedArray(candidate.diagnostics, Diagnostic.is);\n    }\n    CodeActionContext.is = is;\n})(CodeActionContext || (CodeActionContext = {}));\n/**\n * The CodeLens namespace provides helper functions to work with\n * [CodeLens](#CodeLens) literals.\n */\nexport var CodeLens;\n(function (CodeLens) {\n    /**\n     * Creates a new CodeLens literal.\n     */\n    function create(range, data) {\n        var result = { range: range };\n        if (Is.defined(data))\n            result.data = data;\n        return result;\n    }\n    CodeLens.create = create;\n    /**\n     * Checks whether the given literal conforms to the [CodeLens](#CodeLens) interface.\n     */\n    function is(value) {\n        var candidate = value;\n        return Is.defined(candidate) && Range.is(candidate.range) && (Is.undefined(candidate.command) || Command.is(candidate.command));\n    }\n    CodeLens.is = is;\n})(CodeLens || (CodeLens = {}));\n/**\n * The FormattingOptions namespace provides helper functions to work with\n * [FormattingOptions](#FormattingOptions) literals.\n */\nexport var FormattingOptions;\n(function (FormattingOptions) {\n    /**\n     * Creates a new FormattingOptions literal.\n     */\n    function create(tabSize, insertSpaces) {\n        return { tabSize: tabSize, insertSpaces: insertSpaces };\n    }\n    FormattingOptions.create = create;\n    /**\n     * Checks whether the given literal conforms to the [FormattingOptions](#FormattingOptions) interface.\n     */\n    function is(value) {\n        var candidate = value;\n        return Is.defined(candidate) && Is.number(candidate.tabSize) && Is.boolean(candidate.insertSpaces);\n    }\n    FormattingOptions.is = is;\n})(FormattingOptions || (FormattingOptions = {}));\n/**\n * A document link is a range in a text document that links to an internal or external resource, like another\n * text document or a web site.\n */\nvar DocumentLink = /** @class */ (function () {\n    function DocumentLink() {\n    }\n    return DocumentLink;\n}());\nexport { DocumentLink };\n/**\n * The DocumentLink namespace provides helper functions to work with\n * [DocumentLink](#DocumentLink) literals.\n */\n(function (DocumentLink) {\n    /**\n     * Creates a new DocumentLink literal.\n     */\n    function create(range, target) {\n        return { range: range, target: target };\n    }\n    DocumentLink.create = create;\n    /**\n     * Checks whether the given literal conforms to the [DocumentLink](#DocumentLink) interface.\n     */\n    function is(value) {\n        var candidate = value;\n        return Is.defined(candidate) && Range.is(candidate.range) && (Is.undefined(candidate.target) || Is.string(candidate.target));\n    }\n    DocumentLink.is = is;\n})(DocumentLink || (DocumentLink = {}));\nexport var EOL = ['\\n', '\\r\\n', '\\r'];\nexport var TextDocument;\n(function (TextDocument) {\n    /**\n     * Creates a new ITextDocument literal from the given uri and content.\n     * @param uri The document's uri.\n     * @param languageId  The document's language Id.\n     * @param content The document's content.\n     */\n    function create(uri, languageId, version, content) {\n        return new FullTextDocument(uri, languageId, version, content);\n    }\n    TextDocument.create = create;\n    /**\n     * Checks whether the given literal conforms to the [ITextDocument](#ITextDocument) interface.\n     */\n    function is(value) {\n        var candidate = value;\n        return Is.defined(candidate) && Is.string(candidate.uri) && (Is.undefined(candidate.languageId) || Is.string(candidate.languageId)) && Is.number(candidate.lineCount)\n            && Is.func(candidate.getText) && Is.func(candidate.positionAt) && Is.func(candidate.offsetAt) ? true : false;\n    }\n    TextDocument.is = is;\n    function applyEdits(document, edits) {\n        var text = document.getText();\n        var sortedEdits = mergeSort(edits, function (a, b) {\n            var diff = a.range.start.line - b.range.start.line;\n            if (diff === 0) {\n                return a.range.start.character - b.range.start.character;\n            }\n            return 0;\n        });\n        var lastModifiedOffset = text.length;\n        for (var i = sortedEdits.length - 1; i >= 0; i--) {\n            var e = sortedEdits[i];\n            var startOffset = document.offsetAt(e.range.start);\n            var endOffset = document.offsetAt(e.range.end);\n            if (endOffset <= lastModifiedOffset) {\n                text = text.substring(0, startOffset) + e.newText + text.substring(endOffset, text.length);\n            }\n            else {\n                throw new Error('Ovelapping edit');\n            }\n            lastModifiedOffset = startOffset;\n        }\n        return text;\n    }\n    TextDocument.applyEdits = applyEdits;\n    function mergeSort(data, compare) {\n        if (data.length <= 1) {\n            // sorted\n            return data;\n        }\n        var p = (data.length / 2) | 0;\n        var left = data.slice(0, p);\n        var right = data.slice(p);\n        mergeSort(left, compare);\n        mergeSort(right, compare);\n        var leftIdx = 0;\n        var rightIdx = 0;\n        var i = 0;\n        while (leftIdx < left.length && rightIdx < right.length) {\n            var ret = compare(left[leftIdx], right[rightIdx]);\n            if (ret <= 0) {\n                // smaller_equal -> take left to preserve order\n                data[i++] = left[leftIdx++];\n            }\n            else {\n                // greater -> take right\n                data[i++] = right[rightIdx++];\n            }\n        }\n        while (leftIdx < left.length) {\n            data[i++] = left[leftIdx++];\n        }\n        while (rightIdx < right.length) {\n            data[i++] = right[rightIdx++];\n        }\n        return data;\n    }\n})(TextDocument || (TextDocument = {}));\n/**\n * Represents reasons why a text document is saved.\n */\nexport var TextDocumentSaveReason;\n(function (TextDocumentSaveReason) {\n    /**\n     * Manually triggered, e.g. by the user pressing save, by starting debugging,\n     * or by an API call.\n     */\n    TextDocumentSaveReason.Manual = 1;\n    /**\n     * Automatic after a delay.\n     */\n    TextDocumentSaveReason.AfterDelay = 2;\n    /**\n     * When the editor lost focus.\n     */\n    TextDocumentSaveReason.FocusOut = 3;\n})(TextDocumentSaveReason || (TextDocumentSaveReason = {}));\nvar FullTextDocument = /** @class */ (function () {\n    function FullTextDocument(uri, languageId, version, content) {\n        this._uri = uri;\n        this._languageId = languageId;\n        this._version = version;\n        this._content = content;\n        this._lineOffsets = null;\n    }\n    Object.defineProperty(FullTextDocument.prototype, \"uri\", {\n        get: function () {\n            return this._uri;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(FullTextDocument.prototype, \"languageId\", {\n        get: function () {\n            return this._languageId;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(FullTextDocument.prototype, \"version\", {\n        get: function () {\n            return this._version;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    FullTextDocument.prototype.getText = function (range) {\n        if (range) {\n            var start = this.offsetAt(range.start);\n            var end = this.offsetAt(range.end);\n            return this._content.substring(start, end);\n        }\n        return this._content;\n    };\n    FullTextDocument.prototype.update = function (event, version) {\n        this._content = event.text;\n        this._version = version;\n        this._lineOffsets = null;\n    };\n    FullTextDocument.prototype.getLineOffsets = function () {\n        if (this._lineOffsets === null) {\n            var lineOffsets = [];\n            var text = this._content;\n            var isLineStart = true;\n            for (var i = 0; i < text.length; i++) {\n                if (isLineStart) {\n                    lineOffsets.push(i);\n                    isLineStart = false;\n                }\n                var ch = text.charAt(i);\n                isLineStart = (ch === '\\r' || ch === '\\n');\n                if (ch === '\\r' && i + 1 < text.length && text.charAt(i + 1) === '\\n') {\n                    i++;\n                }\n            }\n            if (isLineStart && text.length > 0) {\n                lineOffsets.push(text.length);\n            }\n            this._lineOffsets = lineOffsets;\n        }\n        return this._lineOffsets;\n    };\n    FullTextDocument.prototype.positionAt = function (offset) {\n        offset = Math.max(Math.min(offset, this._content.length), 0);\n        var lineOffsets = this.getLineOffsets();\n        var low = 0, high = lineOffsets.length;\n        if (high === 0) {\n            return Position.create(0, offset);\n        }\n        while (low < high) {\n            var mid = Math.floor((low + high) / 2);\n            if (lineOffsets[mid] > offset) {\n                high = mid;\n            }\n            else {\n                low = mid + 1;\n            }\n        }\n        // low is the least x for which the line offset is larger than the current offset\n        // or array.length if no line offset is larger than the current offset\n        var line = low - 1;\n        return Position.create(line, offset - lineOffsets[line]);\n    };\n    FullTextDocument.prototype.offsetAt = function (position) {\n        var lineOffsets = this.getLineOffsets();\n        if (position.line >= lineOffsets.length) {\n            return this._content.length;\n        }\n        else if (position.line < 0) {\n            return 0;\n        }\n        var lineOffset = lineOffsets[position.line];\n        var nextLineOffset = (position.line + 1 < lineOffsets.length) ? lineOffsets[position.line + 1] : this._content.length;\n        return Math.max(Math.min(lineOffset + position.character, nextLineOffset), lineOffset);\n    };\n    Object.defineProperty(FullTextDocument.prototype, \"lineCount\", {\n        get: function () {\n            return this.getLineOffsets().length;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    return FullTextDocument;\n}());\nvar Is;\n(function (Is) {\n    var toString = Object.prototype.toString;\n    function defined(value) {\n        return typeof value !== 'undefined';\n    }\n    Is.defined = defined;\n    function undefined(value) {\n        return typeof value === 'undefined';\n    }\n    Is.undefined = undefined;\n    function boolean(value) {\n        return value === true || value === false;\n    }\n    Is.boolean = boolean;\n    function string(value) {\n        return toString.call(value) === '[object String]';\n    }\n    Is.string = string;\n    function number(value) {\n        return toString.call(value) === '[object Number]';\n    }\n    Is.number = number;\n    function func(value) {\n        return toString.call(value) === '[object Function]';\n    }\n    Is.func = func;\n    function typedArray(value, check) {\n        return Array.isArray(value) && value.every(check);\n    }\n    Is.typedArray = typedArray;\n})(Is || (Is = {}));\n","/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n'use strict';\nimport * as ls from './_deps/vscode-languageserver-types/main.js';\nvar Uri = monaco.Uri;\nvar Range = monaco.Range;\n// --- diagnostics --- ---\nvar DiagnosticsAdapter = /** @class */ (function () {\n    function DiagnosticsAdapter(_languageId, _worker, defaults) {\n        var _this = this;\n        this._languageId = _languageId;\n        this._worker = _worker;\n        this._disposables = [];\n        this._listener = Object.create(null);\n        var onModelAdd = function (model) {\n            var modeId = model.getModeId();\n            if (modeId !== _this._languageId) {\n                return;\n            }\n            var handle;\n            _this._listener[model.uri.toString()] = model.onDidChangeContent(function () {\n                clearTimeout(handle);\n                handle = setTimeout(function () { return _this._doValidate(model.uri, modeId); }, 500);\n            });\n            _this._doValidate(model.uri, modeId);\n        };\n        var onModelRemoved = function (model) {\n            monaco.editor.setModelMarkers(model, _this._languageId, []);\n            var uriStr = model.uri.toString();\n            var listener = _this._listener[uriStr];\n            if (listener) {\n                listener.dispose();\n                delete _this._listener[uriStr];\n            }\n        };\n        this._disposables.push(monaco.editor.onDidCreateModel(onModelAdd));\n        this._disposables.push(monaco.editor.onWillDisposeModel(function (model) {\n            onModelRemoved(model);\n            _this._resetSchema(model.uri);\n        }));\n        this._disposables.push(monaco.editor.onDidChangeModelLanguage(function (event) {\n            onModelRemoved(event.model);\n            onModelAdd(event.model);\n            _this._resetSchema(event.model.uri);\n        }));\n        this._disposables.push(defaults.onDidChange(function (_) {\n            monaco.editor.getModels().forEach(function (model) {\n                if (model.getModeId() === _this._languageId) {\n                    onModelRemoved(model);\n                    onModelAdd(model);\n                }\n            });\n        }));\n        this._disposables.push({\n            dispose: function () {\n                monaco.editor.getModels().forEach(onModelRemoved);\n                for (var key in _this._listener) {\n                    _this._listener[key].dispose();\n                }\n            }\n        });\n        monaco.editor.getModels().forEach(onModelAdd);\n    }\n    DiagnosticsAdapter.prototype.dispose = function () {\n        this._disposables.forEach(function (d) { return d && d.dispose(); });\n        this._disposables = [];\n    };\n    DiagnosticsAdapter.prototype._resetSchema = function (resource) {\n        this._worker().then(function (worker) {\n            worker.resetSchema(resource.toString());\n        });\n    };\n    DiagnosticsAdapter.prototype._doValidate = function (resource, languageId) {\n        this._worker(resource).then(function (worker) {\n            return worker.doValidation(resource.toString()).then(function (diagnostics) {\n                var markers = diagnostics.map(function (d) { return toDiagnostics(resource, d); });\n                var model = monaco.editor.getModel(resource);\n                if (model.getModeId() === languageId) {\n                    monaco.editor.setModelMarkers(model, languageId, markers);\n                }\n            });\n        }).then(undefined, function (err) {\n            console.error(err);\n        });\n    };\n    return DiagnosticsAdapter;\n}());\nexport { DiagnosticsAdapter };\nfunction toSeverity(lsSeverity) {\n    switch (lsSeverity) {\n        case ls.DiagnosticSeverity.Error: return monaco.MarkerSeverity.Error;\n        case ls.DiagnosticSeverity.Warning: return monaco.MarkerSeverity.Warning;\n        case ls.DiagnosticSeverity.Information: return monaco.MarkerSeverity.Info;\n        case ls.DiagnosticSeverity.Hint: return monaco.MarkerSeverity.Hint;\n        default:\n            return monaco.MarkerSeverity.Info;\n    }\n}\nfunction toDiagnostics(resource, diag) {\n    var code = typeof diag.code === 'number' ? String(diag.code) : diag.code;\n    return {\n        severity: toSeverity(diag.severity),\n        startLineNumber: diag.range.start.line + 1,\n        startColumn: diag.range.start.character + 1,\n        endLineNumber: diag.range.end.line + 1,\n        endColumn: diag.range.end.character + 1,\n        message: diag.message,\n        code: code,\n        source: diag.source\n    };\n}\n// --- completion ------\nfunction fromPosition(position) {\n    if (!position) {\n        return void 0;\n    }\n    return { character: position.column - 1, line: position.lineNumber - 1 };\n}\nfunction fromRange(range) {\n    if (!range) {\n        return void 0;\n    }\n    return { start: { line: range.startLineNumber - 1, character: range.startColumn - 1 }, end: { line: range.endLineNumber - 1, character: range.endColumn - 1 } };\n}\nfunction toRange(range) {\n    if (!range) {\n        return void 0;\n    }\n    return new Range(range.start.line + 1, range.start.character + 1, range.end.line + 1, range.end.character + 1);\n}\nfunction toCompletionItemKind(kind) {\n    var mItemKind = monaco.languages.CompletionItemKind;\n    switch (kind) {\n        case ls.CompletionItemKind.Text: return mItemKind.Text;\n        case ls.CompletionItemKind.Method: return mItemKind.Method;\n        case ls.CompletionItemKind.Function: return mItemKind.Function;\n        case ls.CompletionItemKind.Constructor: return mItemKind.Constructor;\n        case ls.CompletionItemKind.Field: return mItemKind.Field;\n        case ls.CompletionItemKind.Variable: return mItemKind.Variable;\n        case ls.CompletionItemKind.Class: return mItemKind.Class;\n        case ls.CompletionItemKind.Interface: return mItemKind.Interface;\n        case ls.CompletionItemKind.Module: return mItemKind.Module;\n        case ls.CompletionItemKind.Property: return mItemKind.Property;\n        case ls.CompletionItemKind.Unit: return mItemKind.Unit;\n        case ls.CompletionItemKind.Value: return mItemKind.Value;\n        case ls.CompletionItemKind.Enum: return mItemKind.Enum;\n        case ls.CompletionItemKind.Keyword: return mItemKind.Keyword;\n        case ls.CompletionItemKind.Snippet: return mItemKind.Snippet;\n        case ls.CompletionItemKind.Color: return mItemKind.Color;\n        case ls.CompletionItemKind.File: return mItemKind.File;\n        case ls.CompletionItemKind.Reference: return mItemKind.Reference;\n    }\n    return mItemKind.Property;\n}\nfunction fromCompletionItemKind(kind) {\n    var mItemKind = monaco.languages.CompletionItemKind;\n    switch (kind) {\n        case mItemKind.Text: return ls.CompletionItemKind.Text;\n        case mItemKind.Method: return ls.CompletionItemKind.Method;\n        case mItemKind.Function: return ls.CompletionItemKind.Function;\n        case mItemKind.Constructor: return ls.CompletionItemKind.Constructor;\n        case mItemKind.Field: return ls.CompletionItemKind.Field;\n        case mItemKind.Variable: return ls.CompletionItemKind.Variable;\n        case mItemKind.Class: return ls.CompletionItemKind.Class;\n        case mItemKind.Interface: return ls.CompletionItemKind.Interface;\n        case mItemKind.Module: return ls.CompletionItemKind.Module;\n        case mItemKind.Property: return ls.CompletionItemKind.Property;\n        case mItemKind.Unit: return ls.CompletionItemKind.Unit;\n        case mItemKind.Value: return ls.CompletionItemKind.Value;\n        case mItemKind.Enum: return ls.CompletionItemKind.Enum;\n        case mItemKind.Keyword: return ls.CompletionItemKind.Keyword;\n        case mItemKind.Snippet: return ls.CompletionItemKind.Snippet;\n        case mItemKind.Color: return ls.CompletionItemKind.Color;\n        case mItemKind.File: return ls.CompletionItemKind.File;\n        case mItemKind.Reference: return ls.CompletionItemKind.Reference;\n    }\n    return ls.CompletionItemKind.Property;\n}\nfunction toTextEdit(textEdit) {\n    if (!textEdit) {\n        return void 0;\n    }\n    return {\n        range: toRange(textEdit.range),\n        text: textEdit.newText\n    };\n}\nfunction toCompletionItem(entry) {\n    return {\n        label: entry.label,\n        insertText: entry.insertText,\n        sortText: entry.sortText,\n        filterText: entry.filterText,\n        documentation: entry.documentation,\n        detail: entry.detail,\n        kind: toCompletionItemKind(entry.kind),\n        textEdit: toTextEdit(entry.textEdit),\n        data: entry.data\n    };\n}\nfunction fromMarkdownString(entry) {\n    return {\n        kind: (typeof entry === 'string' ? ls.MarkupKind.PlainText : ls.MarkupKind.Markdown),\n        value: (typeof entry === 'string' ? entry : entry.value)\n    };\n}\nfunction fromCompletionItem(entry) {\n    var item = {\n        label: entry.label,\n        sortText: entry.sortText,\n        filterText: entry.filterText,\n        documentation: fromMarkdownString(entry.documentation),\n        detail: entry.detail,\n        kind: fromCompletionItemKind(entry.kind),\n        data: entry.data\n    };\n    if (typeof entry.insertText === 'object' && typeof entry.insertText.value === 'string') {\n        item.insertText = entry.insertText.value;\n        item.insertTextFormat = ls.InsertTextFormat.Snippet;\n    }\n    else {\n        item.insertText = entry.insertText;\n    }\n    if (entry.range) {\n        item.textEdit = ls.TextEdit.replace(fromRange(entry.range), item.insertText);\n    }\n    return item;\n}\nvar CompletionAdapter = /** @class */ (function () {\n    function CompletionAdapter(_worker) {\n        this._worker = _worker;\n    }\n    Object.defineProperty(CompletionAdapter.prototype, \"triggerCharacters\", {\n        get: function () {\n            return [' ', ':'];\n        },\n        enumerable: true,\n        configurable: true\n    });\n    CompletionAdapter.prototype.provideCompletionItems = function (model, position, token) {\n        var wordInfo = model.getWordUntilPosition(position);\n        var resource = model.uri;\n        return wireCancellationToken(token, this._worker(resource).then(function (worker) {\n            return worker.doComplete(resource.toString(), fromPosition(position));\n        }).then(function (info) {\n            if (!info) {\n                return;\n            }\n            var items = info.items.map(function (entry) {\n                var item = {\n                    label: entry.label,\n                    insertText: entry.insertText,\n                    sortText: entry.sortText,\n                    filterText: entry.filterText,\n                    documentation: entry.documentation,\n                    detail: entry.detail,\n                    kind: toCompletionItemKind(entry.kind),\n                };\n                if (entry.textEdit) {\n                    item.range = toRange(entry.textEdit.range);\n                    item.insertText = entry.textEdit.newText;\n                }\n                if (entry.insertTextFormat === ls.InsertTextFormat.Snippet) {\n                    item.insertText = { value: item.insertText };\n                }\n                return item;\n            });\n            return {\n                isIncomplete: info.isIncomplete,\n                items: items\n            };\n        }));\n    };\n    return CompletionAdapter;\n}());\nexport { CompletionAdapter };\nfunction isMarkupContent(thing) {\n    return thing && typeof thing === 'object' && typeof thing.kind === 'string';\n}\nfunction toMarkdownString(entry) {\n    if (typeof entry === 'string') {\n        return {\n            value: entry\n        };\n    }\n    if (isMarkupContent(entry)) {\n        if (entry.kind === 'plaintext') {\n            return {\n                value: entry.value.replace(/[\\\\`*_{}[\\]()#+\\-.!]/g, '\\\\$&')\n            };\n        }\n        return {\n            value: entry.value\n        };\n    }\n    return { value: '```' + entry.language + '\\n' + entry.value + '\\n```\\n' };\n}\nfunction toMarkedStringArray(contents) {\n    if (!contents) {\n        return void 0;\n    }\n    if (Array.isArray(contents)) {\n        return contents.map(toMarkdownString);\n    }\n    return [toMarkdownString(contents)];\n}\n// --- hover ------\nvar HoverAdapter = /** @class */ (function () {\n    function HoverAdapter(_worker) {\n        this._worker = _worker;\n    }\n    HoverAdapter.prototype.provideHover = function (model, position, token) {\n        var resource = model.uri;\n        return wireCancellationToken(token, this._worker(resource).then(function (worker) {\n            return worker.doHover(resource.toString(), fromPosition(position));\n        }).then(function (info) {\n            if (!info) {\n                return;\n            }\n            return {\n                range: toRange(info.range),\n                contents: toMarkedStringArray(info.contents)\n            };\n        }));\n    };\n    return HoverAdapter;\n}());\nexport { HoverAdapter };\n// --- definition ------\nfunction toLocation(location) {\n    return {\n        uri: Uri.parse(location.uri),\n        range: toRange(location.range)\n    };\n}\n// --- document symbols ------\nfunction toSymbolKind(kind) {\n    var mKind = monaco.languages.SymbolKind;\n    switch (kind) {\n        case ls.SymbolKind.File: return mKind.Array;\n        case ls.SymbolKind.Module: return mKind.Module;\n        case ls.SymbolKind.Namespace: return mKind.Namespace;\n        case ls.SymbolKind.Package: return mKind.Package;\n        case ls.SymbolKind.Class: return mKind.Class;\n        case ls.SymbolKind.Method: return mKind.Method;\n        case ls.SymbolKind.Property: return mKind.Property;\n        case ls.SymbolKind.Field: return mKind.Field;\n        case ls.SymbolKind.Constructor: return mKind.Constructor;\n        case ls.SymbolKind.Enum: return mKind.Enum;\n        case ls.SymbolKind.Interface: return mKind.Interface;\n        case ls.SymbolKind.Function: return mKind.Function;\n        case ls.SymbolKind.Variable: return mKind.Variable;\n        case ls.SymbolKind.Constant: return mKind.Constant;\n        case ls.SymbolKind.String: return mKind.String;\n        case ls.SymbolKind.Number: return mKind.Number;\n        case ls.SymbolKind.Boolean: return mKind.Boolean;\n        case ls.SymbolKind.Array: return mKind.Array;\n    }\n    return mKind.Function;\n}\nvar DocumentSymbolAdapter = /** @class */ (function () {\n    function DocumentSymbolAdapter(_worker) {\n        this._worker = _worker;\n    }\n    DocumentSymbolAdapter.prototype.provideDocumentSymbols = function (model, token) {\n        var resource = model.uri;\n        return wireCancellationToken(token, this._worker(resource).then(function (worker) { return worker.findDocumentSymbols(resource.toString()); }).then(function (items) {\n            if (!items) {\n                return;\n            }\n            return items.map(function (item) { return ({\n                name: item.name,\n                containerName: item.containerName,\n                kind: toSymbolKind(item.kind),\n                location: toLocation(item.location)\n            }); });\n        }));\n    };\n    return DocumentSymbolAdapter;\n}());\nexport { DocumentSymbolAdapter };\nfunction fromFormattingOptions(options) {\n    return {\n        tabSize: options.tabSize,\n        insertSpaces: options.insertSpaces\n    };\n}\nvar DocumentFormattingEditProvider = /** @class */ (function () {\n    function DocumentFormattingEditProvider(_worker) {\n        this._worker = _worker;\n    }\n    DocumentFormattingEditProvider.prototype.provideDocumentFormattingEdits = function (model, options, token) {\n        var resource = model.uri;\n        return wireCancellationToken(token, this._worker(resource).then(function (worker) {\n            return worker.format(resource.toString(), null, fromFormattingOptions(options)).then(function (edits) {\n                if (!edits || edits.length === 0) {\n                    return;\n                }\n                return edits.map(toTextEdit);\n            });\n        }));\n    };\n    return DocumentFormattingEditProvider;\n}());\nexport { DocumentFormattingEditProvider };\nvar DocumentRangeFormattingEditProvider = /** @class */ (function () {\n    function DocumentRangeFormattingEditProvider(_worker) {\n        this._worker = _worker;\n    }\n    DocumentRangeFormattingEditProvider.prototype.provideDocumentRangeFormattingEdits = function (model, range, options, token) {\n        var resource = model.uri;\n        return wireCancellationToken(token, this._worker(resource).then(function (worker) {\n            return worker.format(resource.toString(), fromRange(range), fromFormattingOptions(options)).then(function (edits) {\n                if (!edits || edits.length === 0) {\n                    return;\n                }\n                return edits.map(toTextEdit);\n            });\n        }));\n    };\n    return DocumentRangeFormattingEditProvider;\n}());\nexport { DocumentRangeFormattingEditProvider };\nvar DocumentColorAdapter = /** @class */ (function () {\n    function DocumentColorAdapter(_worker) {\n        this._worker = _worker;\n    }\n    DocumentColorAdapter.prototype.provideDocumentColors = function (model, token) {\n        var resource = model.uri;\n        return wireCancellationToken(token, this._worker(resource).then(function (worker) { return worker.findDocumentColors(resource.toString()); }).then(function (infos) {\n            if (!infos) {\n                return;\n            }\n            return infos.map(function (item) { return ({\n                color: item.color,\n                range: toRange(item.range)\n            }); });\n        }));\n    };\n    DocumentColorAdapter.prototype.provideColorPresentations = function (model, info, token) {\n        var resource = model.uri;\n        return wireCancellationToken(token, this._worker(resource).then(function (worker) { return worker.getColorPresentations(resource.toString(), info.color, fromRange(info.range)); }).then(function (presentations) {\n            if (!presentations) {\n                return;\n            }\n            return presentations.map(function (presentation) {\n                var item = {\n                    label: presentation.label,\n                };\n                if (presentation.textEdit) {\n                    item.textEdit = toTextEdit(presentation.textEdit);\n                }\n                if (presentation.additionalTextEdits) {\n                    item.additionalTextEdits = presentation.additionalTextEdits.map(toTextEdit);\n                }\n                return item;\n            });\n        }));\n    };\n    return DocumentColorAdapter;\n}());\nexport { DocumentColorAdapter };\n/**\n * Hook a cancellation token to a WinJS Promise\n */\nfunction wireCancellationToken(token, promise) {\n    if (promise.cancel) {\n        token.onCancellationRequested(function () { return promise.cancel(); });\n    }\n    return promise;\n}\n","/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n'use strict';\n/**\n * Creates a JSON scanner on the given text.\n * If ignoreTrivia is set, whitespaces or comments are ignored.\n */\nexport function createScanner(text, ignoreTrivia) {\n    if (ignoreTrivia === void 0) { ignoreTrivia = false; }\n    var pos = 0, len = text.length, value = '', tokenOffset = 0, token = 16 /* Unknown */, scanError = 0 /* None */;\n    function scanHexDigits(count, exact) {\n        var digits = 0;\n        var value = 0;\n        while (digits < count || !exact) {\n            var ch = text.charCodeAt(pos);\n            if (ch >= 48 /* _0 */ && ch <= 57 /* _9 */) {\n                value = value * 16 + ch - 48 /* _0 */;\n            }\n            else if (ch >= 65 /* A */ && ch <= 70 /* F */) {\n                value = value * 16 + ch - 65 /* A */ + 10;\n            }\n            else if (ch >= 97 /* a */ && ch <= 102 /* f */) {\n                value = value * 16 + ch - 97 /* a */ + 10;\n            }\n            else {\n                break;\n            }\n            pos++;\n            digits++;\n        }\n        if (digits < count) {\n            value = -1;\n        }\n        return value;\n    }\n    function setPosition(newPosition) {\n        pos = newPosition;\n        value = '';\n        tokenOffset = 0;\n        token = 16 /* Unknown */;\n        scanError = 0 /* None */;\n    }\n    function scanNumber() {\n        var start = pos;\n        if (text.charCodeAt(pos) === 48 /* _0 */) {\n            pos++;\n        }\n        else {\n            pos++;\n            while (pos < text.length && isDigit(text.charCodeAt(pos))) {\n                pos++;\n            }\n        }\n        if (pos < text.length && text.charCodeAt(pos) === 46 /* dot */) {\n            pos++;\n            if (pos < text.length && isDigit(text.charCodeAt(pos))) {\n                pos++;\n                while (pos < text.length && isDigit(text.charCodeAt(pos))) {\n                    pos++;\n                }\n            }\n            else {\n                scanError = 3 /* UnexpectedEndOfNumber */;\n                return text.substring(start, pos);\n            }\n        }\n        var end = pos;\n        if (pos < text.length && (text.charCodeAt(pos) === 69 /* E */ || text.charCodeAt(pos) === 101 /* e */)) {\n            pos++;\n            if (pos < text.length && text.charCodeAt(pos) === 43 /* plus */ || text.charCodeAt(pos) === 45 /* minus */) {\n                pos++;\n            }\n            if (pos < text.length && isDigit(text.charCodeAt(pos))) {\n                pos++;\n                while (pos < text.length && isDigit(text.charCodeAt(pos))) {\n                    pos++;\n                }\n                end = pos;\n            }\n            else {\n                scanError = 3 /* UnexpectedEndOfNumber */;\n            }\n        }\n        return text.substring(start, end);\n    }\n    function scanString() {\n        var result = '', start = pos;\n        while (true) {\n            if (pos >= len) {\n                result += text.substring(start, pos);\n                scanError = 2 /* UnexpectedEndOfString */;\n                break;\n            }\n            var ch = text.charCodeAt(pos);\n            if (ch === 34 /* doubleQuote */) {\n                result += text.substring(start, pos);\n                pos++;\n                break;\n            }\n            if (ch === 92 /* backslash */) {\n                result += text.substring(start, pos);\n                pos++;\n                if (pos >= len) {\n                    scanError = 2 /* UnexpectedEndOfString */;\n                    break;\n                }\n                ch = text.charCodeAt(pos++);\n                switch (ch) {\n                    case 34 /* doubleQuote */:\n                        result += '\\\"';\n                        break;\n                    case 92 /* backslash */:\n                        result += '\\\\';\n                        break;\n                    case 47 /* slash */:\n                        result += '/';\n                        break;\n                    case 98 /* b */:\n                        result += '\\b';\n                        break;\n                    case 102 /* f */:\n                        result += '\\f';\n                        break;\n                    case 110 /* n */:\n                        result += '\\n';\n                        break;\n                    case 114 /* r */:\n                        result += '\\r';\n                        break;\n                    case 116 /* t */:\n                        result += '\\t';\n                        break;\n                    case 117 /* u */:\n                        var ch_1 = scanHexDigits(4, true);\n                        if (ch_1 >= 0) {\n                            result += String.fromCharCode(ch_1);\n                        }\n                        else {\n                            scanError = 4 /* InvalidUnicode */;\n                        }\n                        break;\n                    default:\n                        scanError = 5 /* InvalidEscapeCharacter */;\n                }\n                start = pos;\n                continue;\n            }\n            if (ch >= 0 && ch <= 0x1f) {\n                if (isLineBreak(ch)) {\n                    result += text.substring(start, pos);\n                    scanError = 2 /* UnexpectedEndOfString */;\n                    break;\n                }\n                else {\n                    scanError = 6 /* InvalidCharacter */;\n                    // mark as error but continue with string\n                }\n            }\n            pos++;\n        }\n        return result;\n    }\n    function scanNext() {\n        value = '';\n        scanError = 0 /* None */;\n        tokenOffset = pos;\n        if (pos >= len) {\n            // at the end\n            tokenOffset = len;\n            return token = 17 /* EOF */;\n        }\n        var code = text.charCodeAt(pos);\n        // trivia: whitespace\n        if (isWhiteSpace(code)) {\n            do {\n                pos++;\n                value += String.fromCharCode(code);\n                code = text.charCodeAt(pos);\n            } while (isWhiteSpace(code));\n            return token = 15 /* Trivia */;\n        }\n        // trivia: newlines\n        if (isLineBreak(code)) {\n            pos++;\n            value += String.fromCharCode(code);\n            if (code === 13 /* carriageReturn */ && text.charCodeAt(pos) === 10 /* lineFeed */) {\n                pos++;\n                value += '\\n';\n            }\n            return token = 14 /* LineBreakTrivia */;\n        }\n        switch (code) {\n            // tokens: []{}:,\n            case 123 /* openBrace */:\n                pos++;\n                return token = 1 /* OpenBraceToken */;\n            case 125 /* closeBrace */:\n                pos++;\n                return token = 2 /* CloseBraceToken */;\n            case 91 /* openBracket */:\n                pos++;\n                return token = 3 /* OpenBracketToken */;\n            case 93 /* closeBracket */:\n                pos++;\n                return token = 4 /* CloseBracketToken */;\n            case 58 /* colon */:\n                pos++;\n                return token = 6 /* ColonToken */;\n            case 44 /* comma */:\n                pos++;\n                return token = 5 /* CommaToken */;\n            // strings\n            case 34 /* doubleQuote */:\n                pos++;\n                value = scanString();\n                return token = 10 /* StringLiteral */;\n            // comments\n            case 47 /* slash */:\n                var start = pos - 1;\n                // Single-line comment\n                if (text.charCodeAt(pos + 1) === 47 /* slash */) {\n                    pos += 2;\n                    while (pos < len) {\n                        if (isLineBreak(text.charCodeAt(pos))) {\n                            break;\n                        }\n                        pos++;\n                    }\n                    value = text.substring(start, pos);\n                    return token = 12 /* LineCommentTrivia */;\n                }\n                // Multi-line comment\n                if (text.charCodeAt(pos + 1) === 42 /* asterisk */) {\n                    pos += 2;\n                    var commentClosed = false;\n                    while (pos < len) {\n                        var ch = text.charCodeAt(pos);\n                        if (ch === 42 /* asterisk */ && (pos + 1 < len) && text.charCodeAt(pos + 1) === 47 /* slash */) {\n                            pos += 2;\n                            commentClosed = true;\n                            break;\n                        }\n                        pos++;\n                    }\n                    if (!commentClosed) {\n                        pos++;\n                        scanError = 1 /* UnexpectedEndOfComment */;\n                    }\n                    value = text.substring(start, pos);\n                    return token = 13 /* BlockCommentTrivia */;\n                }\n                // just a single slash\n                value += String.fromCharCode(code);\n                pos++;\n                return token = 16 /* Unknown */;\n            // numbers\n            case 45 /* minus */:\n                value += String.fromCharCode(code);\n                pos++;\n                if (pos === len || !isDigit(text.charCodeAt(pos))) {\n                    return token = 16 /* Unknown */;\n                }\n            // found a minus, followed by a number so\n            // we fall through to proceed with scanning\n            // numbers\n            case 48 /* _0 */:\n            case 49 /* _1 */:\n            case 50 /* _2 */:\n            case 51 /* _3 */:\n            case 52 /* _4 */:\n            case 53 /* _5 */:\n            case 54 /* _6 */:\n            case 55 /* _7 */:\n            case 56 /* _8 */:\n            case 57 /* _9 */:\n                value += scanNumber();\n                return token = 11 /* NumericLiteral */;\n            // literals and unknown symbols\n            default:\n                // is a literal? Read the full word.\n                while (pos < len && isUnknownContentCharacter(code)) {\n                    pos++;\n                    code = text.charCodeAt(pos);\n                }\n                if (tokenOffset !== pos) {\n                    value = text.substring(tokenOffset, pos);\n                    // keywords: true, false, null\n                    switch (value) {\n                        case 'true': return token = 8 /* TrueKeyword */;\n                        case 'false': return token = 9 /* FalseKeyword */;\n                        case 'null': return token = 7 /* NullKeyword */;\n                    }\n                    return token = 16 /* Unknown */;\n                }\n                // some\n                value += String.fromCharCode(code);\n                pos++;\n                return token = 16 /* Unknown */;\n        }\n    }\n    function isUnknownContentCharacter(code) {\n        if (isWhiteSpace(code) || isLineBreak(code)) {\n            return false;\n        }\n        switch (code) {\n            case 125 /* closeBrace */:\n            case 93 /* closeBracket */:\n            case 123 /* openBrace */:\n            case 91 /* openBracket */:\n            case 34 /* doubleQuote */:\n            case 58 /* colon */:\n            case 44 /* comma */:\n                return false;\n        }\n        return true;\n    }\n    function scanNextNonTrivia() {\n        var result;\n        do {\n            result = scanNext();\n        } while (result >= 12 /* LineCommentTrivia */ && result <= 15 /* Trivia */);\n        return result;\n    }\n    return {\n        setPosition: setPosition,\n        getPosition: function () { return pos; },\n        scan: ignoreTrivia ? scanNextNonTrivia : scanNext,\n        getToken: function () { return token; },\n        getTokenValue: function () { return value; },\n        getTokenOffset: function () { return tokenOffset; },\n        getTokenLength: function () { return pos - tokenOffset; },\n        getTokenError: function () { return scanError; }\n    };\n}\nfunction isWhiteSpace(ch) {\n    return ch === 32 /* space */ || ch === 9 /* tab */ || ch === 11 /* verticalTab */ || ch === 12 /* formFeed */ ||\n        ch === 160 /* nonBreakingSpace */ || ch === 5760 /* ogham */ || ch >= 8192 /* enQuad */ && ch <= 8203 /* zeroWidthSpace */ ||\n        ch === 8239 /* narrowNoBreakSpace */ || ch === 8287 /* mathematicalSpace */ || ch === 12288 /* ideographicSpace */ || ch === 65279 /* byteOrderMark */;\n}\nfunction isLineBreak(ch) {\n    return ch === 10 /* lineFeed */ || ch === 13 /* carriageReturn */ || ch === 8232 /* lineSeparator */ || ch === 8233 /* paragraphSeparator */;\n}\nfunction isDigit(ch) {\n    return ch >= 48 /* _0 */ && ch <= 57 /* _9 */;\n}\n//# sourceMappingURL=scanner.js.map","/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n'use strict';\nimport { createScanner } from './scanner.js';\nexport function format(documentText, range, options) {\n    var initialIndentLevel;\n    var formatText;\n    var formatTextStart;\n    var rangeStart;\n    var rangeEnd;\n    if (range) {\n        rangeStart = range.offset;\n        rangeEnd = rangeStart + range.length;\n        formatTextStart = rangeStart;\n        while (formatTextStart > 0 && !isEOL(documentText, formatTextStart - 1)) {\n            formatTextStart--;\n        }\n        var endOffset = rangeEnd;\n        while (endOffset < documentText.length && !isEOL(documentText, endOffset)) {\n            endOffset++;\n        }\n        formatText = documentText.substring(formatTextStart, endOffset);\n        initialIndentLevel = computeIndentLevel(formatText, 0, options);\n    }\n    else {\n        formatText = documentText;\n        initialIndentLevel = 0;\n        formatTextStart = 0;\n        rangeStart = 0;\n        rangeEnd = documentText.length;\n    }\n    var eol = getEOL(options, documentText);\n    var lineBreak = false;\n    var indentLevel = 0;\n    var indentValue;\n    if (options.insertSpaces) {\n        indentValue = repeat(' ', options.tabSize || 4);\n    }\n    else {\n        indentValue = '\\t';\n    }\n    var scanner = createScanner(formatText, false);\n    var hasError = false;\n    function newLineAndIndent() {\n        return eol + repeat(indentValue, initialIndentLevel + indentLevel);\n    }\n    function scanNext() {\n        var token = scanner.scan();\n        lineBreak = false;\n        while (token === 15 /* Trivia */ || token === 14 /* LineBreakTrivia */) {\n            lineBreak = lineBreak || (token === 14 /* LineBreakTrivia */);\n            token = scanner.scan();\n        }\n        hasError = token === 16 /* Unknown */ || scanner.getTokenError() !== 0 /* None */;\n        return token;\n    }\n    var editOperations = [];\n    function addEdit(text, startOffset, endOffset) {\n        if (!hasError && startOffset < rangeEnd && endOffset > rangeStart && documentText.substring(startOffset, endOffset) !== text) {\n            editOperations.push({ offset: startOffset, length: endOffset - startOffset, content: text });\n        }\n    }\n    var firstToken = scanNext();\n    if (firstToken !== 17 /* EOF */) {\n        var firstTokenStart = scanner.getTokenOffset() + formatTextStart;\n        var initialIndent = repeat(indentValue, initialIndentLevel);\n        addEdit(initialIndent, formatTextStart, firstTokenStart);\n    }\n    while (firstToken !== 17 /* EOF */) {\n        var firstTokenEnd = scanner.getTokenOffset() + scanner.getTokenLength() + formatTextStart;\n        var secondToken = scanNext();\n        var replaceContent = '';\n        while (!lineBreak && (secondToken === 12 /* LineCommentTrivia */ || secondToken === 13 /* BlockCommentTrivia */)) {\n            // comments on the same line: keep them on the same line, but ignore them otherwise\n            var commentTokenStart = scanner.getTokenOffset() + formatTextStart;\n            addEdit(' ', firstTokenEnd, commentTokenStart);\n            firstTokenEnd = scanner.getTokenOffset() + scanner.getTokenLength() + formatTextStart;\n            replaceContent = secondToken === 12 /* LineCommentTrivia */ ? newLineAndIndent() : '';\n            secondToken = scanNext();\n        }\n        if (secondToken === 2 /* CloseBraceToken */) {\n            if (firstToken !== 1 /* OpenBraceToken */) {\n                indentLevel--;\n                replaceContent = newLineAndIndent();\n            }\n        }\n        else if (secondToken === 4 /* CloseBracketToken */) {\n            if (firstToken !== 3 /* OpenBracketToken */) {\n                indentLevel--;\n                replaceContent = newLineAndIndent();\n            }\n        }\n        else {\n            switch (firstToken) {\n                case 3 /* OpenBracketToken */:\n                case 1 /* OpenBraceToken */:\n                    indentLevel++;\n                    replaceContent = newLineAndIndent();\n                    break;\n                case 5 /* CommaToken */:\n                case 12 /* LineCommentTrivia */:\n                    replaceContent = newLineAndIndent();\n                    break;\n                case 13 /* BlockCommentTrivia */:\n                    if (lineBreak) {\n                        replaceContent = newLineAndIndent();\n                    }\n                    else {\n                        // symbol following comment on the same line: keep on same line, separate with ' '\n                        replaceContent = ' ';\n                    }\n                    break;\n                case 6 /* ColonToken */:\n                    replaceContent = ' ';\n                    break;\n                case 10 /* StringLiteral */:\n                    if (secondToken === 6 /* ColonToken */) {\n                        replaceContent = '';\n                        break;\n                    }\n                // fall through\n                case 7 /* NullKeyword */:\n                case 8 /* TrueKeyword */:\n                case 9 /* FalseKeyword */:\n                case 11 /* NumericLiteral */:\n                case 2 /* CloseBraceToken */:\n                case 4 /* CloseBracketToken */:\n                    if (secondToken === 12 /* LineCommentTrivia */ || secondToken === 13 /* BlockCommentTrivia */) {\n                        replaceContent = ' ';\n                    }\n                    else if (secondToken !== 5 /* CommaToken */ && secondToken !== 17 /* EOF */) {\n                        hasError = true;\n                    }\n                    break;\n                case 16 /* Unknown */:\n                    hasError = true;\n                    break;\n            }\n            if (lineBreak && (secondToken === 12 /* LineCommentTrivia */ || secondToken === 13 /* BlockCommentTrivia */)) {\n                replaceContent = newLineAndIndent();\n            }\n        }\n        var secondTokenStart = scanner.getTokenOffset() + formatTextStart;\n        addEdit(replaceContent, firstTokenEnd, secondTokenStart);\n        firstToken = secondToken;\n    }\n    return editOperations;\n}\nfunction repeat(s, count) {\n    var result = '';\n    for (var i = 0; i < count; i++) {\n        result += s;\n    }\n    return result;\n}\nfunction computeIndentLevel(content, offset, options) {\n    var i = 0;\n    var nChars = 0;\n    var tabSize = options.tabSize || 4;\n    while (i < content.length) {\n        var ch = content.charAt(i);\n        if (ch === ' ') {\n            nChars++;\n        }\n        else if (ch === '\\t') {\n            nChars += tabSize;\n        }\n        else {\n            break;\n        }\n        i++;\n    }\n    return Math.floor(nChars / tabSize);\n}\nfunction getEOL(options, text) {\n    for (var i = 0; i < text.length; i++) {\n        var ch = text.charAt(i);\n        if (ch === '\\r') {\n            if (i + 1 < text.length && text.charAt(i + 1) === '\\n') {\n                return '\\r\\n';\n            }\n            return '\\r';\n        }\n        else if (ch === '\\n') {\n            return '\\n';\n        }\n    }\n    return (options && options.eol) || '\\n';\n}\nexport function isEOL(text, offset) {\n    return '\\r\\n'.indexOf(text.charAt(offset)) !== -1;\n}\n//# sourceMappingURL=format.js.map","/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n'use strict';\nimport { createScanner } from './scanner.js';\n/**\n * For a given offset, evaluate the location in the JSON document. Each segment in the location path is either a property name or an array index.\n */\nexport function getLocation(text, position) {\n    var segments = []; // strings or numbers\n    var earlyReturnException = new Object();\n    var previousNode = void 0;\n    var previousNodeInst = {\n        value: {},\n        offset: 0,\n        length: 0,\n        type: 'object'\n    };\n    var isAtPropertyKey = false;\n    function setPreviousNode(value, offset, length, type) {\n        previousNodeInst.value = value;\n        previousNodeInst.offset = offset;\n        previousNodeInst.length = length;\n        previousNodeInst.type = type;\n        previousNodeInst.columnOffset = void 0;\n        previousNode = previousNodeInst;\n    }\n    try {\n        visit(text, {\n            onObjectBegin: function (offset, length) {\n                if (position <= offset) {\n                    throw earlyReturnException;\n                }\n                previousNode = void 0;\n                isAtPropertyKey = position > offset;\n                segments.push(''); // push a placeholder (will be replaced)\n            },\n            onObjectProperty: function (name, offset, length) {\n                if (position < offset) {\n                    throw earlyReturnException;\n                }\n                setPreviousNode(name, offset, length, 'property');\n                segments[segments.length - 1] = name;\n                if (position <= offset + length) {\n                    throw earlyReturnException;\n                }\n            },\n            onObjectEnd: function (offset, length) {\n                if (position <= offset) {\n                    throw earlyReturnException;\n                }\n                previousNode = void 0;\n                segments.pop();\n            },\n            onArrayBegin: function (offset, length) {\n                if (position <= offset) {\n                    throw earlyReturnException;\n                }\n                previousNode = void 0;\n                segments.push(0);\n            },\n            onArrayEnd: function (offset, length) {\n                if (position <= offset) {\n                    throw earlyReturnException;\n                }\n                previousNode = void 0;\n                segments.pop();\n            },\n            onLiteralValue: function (value, offset, length) {\n                if (position < offset) {\n                    throw earlyReturnException;\n                }\n                setPreviousNode(value, offset, length, getLiteralNodeType(value));\n                if (position <= offset + length) {\n                    throw earlyReturnException;\n                }\n            },\n            onSeparator: function (sep, offset, length) {\n                if (position <= offset) {\n                    throw earlyReturnException;\n                }\n                if (sep === ':' && previousNode && previousNode.type === 'property') {\n                    previousNode.columnOffset = offset;\n                    isAtPropertyKey = false;\n                    previousNode = void 0;\n                }\n                else if (sep === ',') {\n                    var last = segments[segments.length - 1];\n                    if (typeof last === 'number') {\n                        segments[segments.length - 1] = last + 1;\n                    }\n                    else {\n                        isAtPropertyKey = true;\n                        segments[segments.length - 1] = '';\n                    }\n                    previousNode = void 0;\n                }\n            }\n        });\n    }\n    catch (e) {\n        if (e !== earlyReturnException) {\n            throw e;\n        }\n    }\n    return {\n        path: segments,\n        previousNode: previousNode,\n        isAtPropertyKey: isAtPropertyKey,\n        matches: function (pattern) {\n            var k = 0;\n            for (var i = 0; k < pattern.length && i < segments.length; i++) {\n                if (pattern[k] === segments[i] || pattern[k] === '*') {\n                    k++;\n                }\n                else if (pattern[k] !== '**') {\n                    return false;\n                }\n            }\n            return k === pattern.length;\n        }\n    };\n}\n/**\n * Parses the given text and returns the object the JSON content represents. On invalid input, the parser tries to be as fault tolerant as possible, but still return a result.\n * Therefore always check the errors list to find out if the input was valid.\n */\nexport function parse(text, errors, options) {\n    if (errors === void 0) { errors = []; }\n    var currentProperty = null;\n    var currentParent = [];\n    var previousParents = [];\n    function onValue(value) {\n        if (Array.isArray(currentParent)) {\n            currentParent.push(value);\n        }\n        else if (currentProperty) {\n            currentParent[currentProperty] = value;\n        }\n    }\n    var visitor = {\n        onObjectBegin: function () {\n            var object = {};\n            onValue(object);\n            previousParents.push(currentParent);\n            currentParent = object;\n            currentProperty = null;\n        },\n        onObjectProperty: function (name) {\n            currentProperty = name;\n        },\n        onObjectEnd: function () {\n            currentParent = previousParents.pop();\n        },\n        onArrayBegin: function () {\n            var array = [];\n            onValue(array);\n            previousParents.push(currentParent);\n            currentParent = array;\n            currentProperty = null;\n        },\n        onArrayEnd: function () {\n            currentParent = previousParents.pop();\n        },\n        onLiteralValue: onValue,\n        onError: function (error, offset, length) {\n            errors.push({ error: error, offset: offset, length: length });\n        }\n    };\n    visit(text, visitor, options);\n    return currentParent[0];\n}\n/**\n * Parses the given text and returns a tree representation the JSON content. On invalid input, the parser tries to be as fault tolerant as possible, but still return a result.\n */\nexport function parseTree(text, errors, options) {\n    if (errors === void 0) { errors = []; }\n    var currentParent = { type: 'array', offset: -1, length: -1, children: [] }; // artificial root\n    function ensurePropertyComplete(endOffset) {\n        if (currentParent.type === 'property') {\n            currentParent.length = endOffset - currentParent.offset;\n            currentParent = currentParent.parent;\n        }\n    }\n    function onValue(valueNode) {\n        currentParent.children.push(valueNode);\n        return valueNode;\n    }\n    var visitor = {\n        onObjectBegin: function (offset) {\n            currentParent = onValue({ type: 'object', offset: offset, length: -1, parent: currentParent, children: [] });\n        },\n        onObjectProperty: function (name, offset, length) {\n            currentParent = onValue({ type: 'property', offset: offset, length: -1, parent: currentParent, children: [] });\n            currentParent.children.push({ type: 'string', value: name, offset: offset, length: length, parent: currentParent });\n        },\n        onObjectEnd: function (offset, length) {\n            currentParent.length = offset + length - currentParent.offset;\n            currentParent = currentParent.parent;\n            ensurePropertyComplete(offset + length);\n        },\n        onArrayBegin: function (offset, length) {\n            currentParent = onValue({ type: 'array', offset: offset, length: -1, parent: currentParent, children: [] });\n        },\n        onArrayEnd: function (offset, length) {\n            currentParent.length = offset + length - currentParent.offset;\n            currentParent = currentParent.parent;\n            ensurePropertyComplete(offset + length);\n        },\n        onLiteralValue: function (value, offset, length) {\n            onValue({ type: getLiteralNodeType(value), offset: offset, length: length, parent: currentParent, value: value });\n            ensurePropertyComplete(offset + length);\n        },\n        onSeparator: function (sep, offset, length) {\n            if (currentParent.type === 'property') {\n                if (sep === ':') {\n                    currentParent.columnOffset = offset;\n                }\n                else if (sep === ',') {\n                    ensurePropertyComplete(offset);\n                }\n            }\n        },\n        onError: function (error, offset, length) {\n            errors.push({ error: error, offset: offset, length: length });\n        }\n    };\n    visit(text, visitor, options);\n    var result = currentParent.children[0];\n    if (result) {\n        delete result.parent;\n    }\n    return result;\n}\n/**\n * Finds the node at the given path in a JSON DOM.\n */\nexport function findNodeAtLocation(root, path) {\n    if (!root) {\n        return void 0;\n    }\n    var node = root;\n    for (var _i = 0, path_1 = path; _i < path_1.length; _i++) {\n        var segment = path_1[_i];\n        if (typeof segment === 'string') {\n            if (node.type !== 'object' || !Array.isArray(node.children)) {\n                return void 0;\n            }\n            var found = false;\n            for (var _a = 0, _b = node.children; _a < _b.length; _a++) {\n                var propertyNode = _b[_a];\n                if (Array.isArray(propertyNode.children) && propertyNode.children[0].value === segment) {\n                    node = propertyNode.children[1];\n                    found = true;\n                    break;\n                }\n            }\n            if (!found) {\n                return void 0;\n            }\n        }\n        else {\n            var index = segment;\n            if (node.type !== 'array' || index < 0 || !Array.isArray(node.children) || index >= node.children.length) {\n                return void 0;\n            }\n            node = node.children[index];\n        }\n    }\n    return node;\n}\n/**\n * Evaluates the JavaScript object of the given JSON DOM node\n */\nexport function getNodeValue(node) {\n    if (node.type === 'array') {\n        return node.children.map(getNodeValue);\n    }\n    else if (node.type === 'object') {\n        var obj = Object.create(null);\n        for (var _i = 0, _a = node.children; _i < _a.length; _i++) {\n            var prop = _a[_i];\n            obj[prop.children[0].value] = getNodeValue(prop.children[1]);\n        }\n        return obj;\n    }\n    return node.value;\n}\n/**\n * Parses the given text and invokes the visitor functions for each object, array and literal reached.\n */\nexport function visit(text, visitor, options) {\n    var _scanner = createScanner(text, false);\n    function toNoArgVisit(visitFunction) {\n        return visitFunction ? function () { return visitFunction(_scanner.getTokenOffset(), _scanner.getTokenLength()); } : function () { return true; };\n    }\n    function toOneArgVisit(visitFunction) {\n        return visitFunction ? function (arg) { return visitFunction(arg, _scanner.getTokenOffset(), _scanner.getTokenLength()); } : function () { return true; };\n    }\n    var onObjectBegin = toNoArgVisit(visitor.onObjectBegin), onObjectProperty = toOneArgVisit(visitor.onObjectProperty), onObjectEnd = toNoArgVisit(visitor.onObjectEnd), onArrayBegin = toNoArgVisit(visitor.onArrayBegin), onArrayEnd = toNoArgVisit(visitor.onArrayEnd), onLiteralValue = toOneArgVisit(visitor.onLiteralValue), onSeparator = toOneArgVisit(visitor.onSeparator), onComment = toNoArgVisit(visitor.onComment), onError = toOneArgVisit(visitor.onError);\n    var disallowComments = options && options.disallowComments;\n    var allowTrailingComma = options && options.allowTrailingComma;\n    function scanNext() {\n        while (true) {\n            var token = _scanner.scan();\n            switch (_scanner.getTokenError()) {\n                case 4 /* InvalidUnicode */:\n                    handleError(14 /* InvalidUnicode */);\n                    break;\n                case 5 /* InvalidEscapeCharacter */:\n                    handleError(15 /* InvalidEscapeCharacter */);\n                    break;\n                case 3 /* UnexpectedEndOfNumber */:\n                    handleError(13 /* UnexpectedEndOfNumber */);\n                    break;\n                case 1 /* UnexpectedEndOfComment */:\n                    if (!disallowComments) {\n                        handleError(11 /* UnexpectedEndOfComment */);\n                    }\n                    break;\n                case 2 /* UnexpectedEndOfString */:\n                    handleError(12 /* UnexpectedEndOfString */);\n                    break;\n                case 6 /* InvalidCharacter */:\n                    handleError(16 /* InvalidCharacter */);\n                    break;\n            }\n            switch (token) {\n                case 12 /* LineCommentTrivia */:\n                case 13 /* BlockCommentTrivia */:\n                    if (disallowComments) {\n                        handleError(10 /* InvalidCommentToken */);\n                    }\n                    else {\n                        onComment();\n                    }\n                    break;\n                case 16 /* Unknown */:\n                    handleError(1 /* InvalidSymbol */);\n                    break;\n                case 15 /* Trivia */:\n                case 14 /* LineBreakTrivia */:\n                    break;\n                default:\n                    return token;\n            }\n        }\n    }\n    function handleError(error, skipUntilAfter, skipUntil) {\n        if (skipUntilAfter === void 0) { skipUntilAfter = []; }\n        if (skipUntil === void 0) { skipUntil = []; }\n        onError(error);\n        if (skipUntilAfter.length + skipUntil.length > 0) {\n            var token = _scanner.getToken();\n            while (token !== 17 /* EOF */) {\n                if (skipUntilAfter.indexOf(token) !== -1) {\n                    scanNext();\n                    break;\n                }\n                else if (skipUntil.indexOf(token) !== -1) {\n                    break;\n                }\n                token = scanNext();\n            }\n        }\n    }\n    function parseString(isValue) {\n        var value = _scanner.getTokenValue();\n        if (isValue) {\n            onLiteralValue(value);\n        }\n        else {\n            onObjectProperty(value);\n        }\n        scanNext();\n        return true;\n    }\n    function parseLiteral() {\n        switch (_scanner.getToken()) {\n            case 11 /* NumericLiteral */:\n                var value = 0;\n                try {\n                    value = JSON.parse(_scanner.getTokenValue());\n                    if (typeof value !== 'number') {\n                        handleError(2 /* InvalidNumberFormat */);\n                        value = 0;\n                    }\n                }\n                catch (e) {\n                    handleError(2 /* InvalidNumberFormat */);\n                }\n                onLiteralValue(value);\n                break;\n            case 7 /* NullKeyword */:\n                onLiteralValue(null);\n                break;\n            case 8 /* TrueKeyword */:\n                onLiteralValue(true);\n                break;\n            case 9 /* FalseKeyword */:\n                onLiteralValue(false);\n                break;\n            default:\n                return false;\n        }\n        scanNext();\n        return true;\n    }\n    function parseProperty() {\n        if (_scanner.getToken() !== 10 /* StringLiteral */) {\n            handleError(3 /* PropertyNameExpected */, [], [2 /* CloseBraceToken */, 5 /* CommaToken */]);\n            return false;\n        }\n        parseString(false);\n        if (_scanner.getToken() === 6 /* ColonToken */) {\n            onSeparator(':');\n            scanNext(); // consume colon\n            if (!parseValue()) {\n                handleError(4 /* ValueExpected */, [], [2 /* CloseBraceToken */, 5 /* CommaToken */]);\n            }\n        }\n        else {\n            handleError(5 /* ColonExpected */, [], [2 /* CloseBraceToken */, 5 /* CommaToken */]);\n        }\n        return true;\n    }\n    function parseObject() {\n        onObjectBegin();\n        scanNext(); // consume open brace\n        var needsComma = false;\n        while (_scanner.getToken() !== 2 /* CloseBraceToken */ && _scanner.getToken() !== 17 /* EOF */) {\n            if (_scanner.getToken() === 5 /* CommaToken */) {\n                if (!needsComma) {\n                    handleError(4 /* ValueExpected */, [], []);\n                }\n                onSeparator(',');\n                scanNext(); // consume comma\n                if (_scanner.getToken() === 2 /* CloseBraceToken */ && allowTrailingComma) {\n                    break;\n                }\n            }\n            else if (needsComma) {\n                handleError(6 /* CommaExpected */, [], []);\n            }\n            if (!parseProperty()) {\n                handleError(4 /* ValueExpected */, [], [2 /* CloseBraceToken */, 5 /* CommaToken */]);\n            }\n            needsComma = true;\n        }\n        onObjectEnd();\n        if (_scanner.getToken() !== 2 /* CloseBraceToken */) {\n            handleError(7 /* CloseBraceExpected */, [2 /* CloseBraceToken */], []);\n        }\n        else {\n            scanNext(); // consume close brace\n        }\n        return true;\n    }\n    function parseArray() {\n        onArrayBegin();\n        scanNext(); // consume open bracket\n        var needsComma = false;\n        while (_scanner.getToken() !== 4 /* CloseBracketToken */ && _scanner.getToken() !== 17 /* EOF */) {\n            if (_scanner.getToken() === 5 /* CommaToken */) {\n                if (!needsComma) {\n                    handleError(4 /* ValueExpected */, [], []);\n                }\n                onSeparator(',');\n                scanNext(); // consume comma\n                if (_scanner.getToken() === 4 /* CloseBracketToken */ && allowTrailingComma) {\n                    break;\n                }\n            }\n            else if (needsComma) {\n                handleError(6 /* CommaExpected */, [], []);\n            }\n            if (!parseValue()) {\n                handleError(4 /* ValueExpected */, [], [4 /* CloseBracketToken */, 5 /* CommaToken */]);\n            }\n            needsComma = true;\n        }\n        onArrayEnd();\n        if (_scanner.getToken() !== 4 /* CloseBracketToken */) {\n            handleError(8 /* CloseBracketExpected */, [4 /* CloseBracketToken */], []);\n        }\n        else {\n            scanNext(); // consume close bracket\n        }\n        return true;\n    }\n    function parseValue() {\n        switch (_scanner.getToken()) {\n            case 3 /* OpenBracketToken */:\n                return parseArray();\n            case 1 /* OpenBraceToken */:\n                return parseObject();\n            case 10 /* StringLiteral */:\n                return parseString(true);\n            default:\n                return parseLiteral();\n        }\n    }\n    scanNext();\n    if (_scanner.getToken() === 17 /* EOF */) {\n        return true;\n    }\n    if (!parseValue()) {\n        handleError(4 /* ValueExpected */, [], []);\n        return false;\n    }\n    if (_scanner.getToken() !== 17 /* EOF */) {\n        handleError(9 /* EndOfFileExpected */, [], []);\n    }\n    return true;\n}\n/**\n * Takes JSON with JavaScript-style comments and remove\n * them. Optionally replaces every none-newline character\n * of comments with a replaceCharacter\n */\nexport function stripComments(text, replaceCh) {\n    var _scanner = createScanner(text), parts = [], kind, offset = 0, pos;\n    do {\n        pos = _scanner.getPosition();\n        kind = _scanner.scan();\n        switch (kind) {\n            case 12 /* LineCommentTrivia */:\n            case 13 /* BlockCommentTrivia */:\n            case 17 /* EOF */:\n                if (offset !== pos) {\n                    parts.push(text.substring(offset, pos));\n                }\n                if (replaceCh !== void 0) {\n                    parts.push(_scanner.getTokenValue().replace(/[^\\r\\n]/g, replaceCh));\n                }\n                offset = _scanner.getPosition();\n                break;\n        }\n    } while (kind !== 17 /* EOF */);\n    return parts.join('');\n}\nfunction getLiteralNodeType(value) {\n    switch (typeof value) {\n        case 'boolean': return 'boolean';\n        case 'number': return 'number';\n        case 'string': return 'string';\n        default: return 'null';\n    }\n}\n//# sourceMappingURL=parser.js.map","/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n'use strict';\nimport { format, isEOL } from './format.js';\nimport { parseTree, findNodeAtLocation } from './parser.js';\nexport function removeProperty(text, path, formattingOptions) {\n    return setProperty(text, path, void 0, formattingOptions);\n}\nexport function setProperty(text, path, value, formattingOptions, getInsertionIndex) {\n    var errors = [];\n    var root = parseTree(text, errors);\n    var parent = void 0;\n    var lastSegment = void 0;\n    while (path.length > 0) {\n        lastSegment = path.pop();\n        parent = findNodeAtLocation(root, path);\n        if (parent === void 0 && value !== void 0) {\n            if (typeof lastSegment === 'string') {\n                value = (_a = {}, _a[lastSegment] = value, _a);\n            }\n            else {\n                value = [value];\n            }\n        }\n        else {\n            break;\n        }\n    }\n    if (!parent) {\n        // empty document\n        if (value === void 0) {\n            throw new Error('Can not delete in empty document');\n        }\n        return withFormatting(text, { offset: root ? root.offset : 0, length: root ? root.length : 0, content: JSON.stringify(value) }, formattingOptions);\n    }\n    else if (parent.type === 'object' && typeof lastSegment === 'string' && Array.isArray(parent.children)) {\n        var existing = findNodeAtLocation(parent, [lastSegment]);\n        if (existing !== void 0) {\n            if (value === void 0) {\n                if (!existing.parent) {\n                    throw new Error('Malformed AST');\n                }\n                var propertyIndex = parent.children.indexOf(existing.parent);\n                var removeBegin = void 0;\n                var removeEnd = existing.parent.offset + existing.parent.length;\n                if (propertyIndex > 0) {\n                    // remove the comma of the previous node\n                    var previous = parent.children[propertyIndex - 1];\n                    removeBegin = previous.offset + previous.length;\n                }\n                else {\n                    removeBegin = parent.offset + 1;\n                    if (parent.children.length > 1) {\n                        // remove the comma of the next node\n                        var next = parent.children[1];\n                        removeEnd = next.offset;\n                    }\n                }\n                return withFormatting(text, { offset: removeBegin, length: removeEnd - removeBegin, content: '' }, formattingOptions);\n            }\n            else {\n                // set value of existing property\n                return withFormatting(text, { offset: existing.offset, length: existing.length, content: JSON.stringify(value) }, formattingOptions);\n            }\n        }\n        else {\n            if (value === void 0) {\n                return []; // property does not exist, nothing to do\n            }\n            var newProperty = JSON.stringify(lastSegment) + \": \" + JSON.stringify(value);\n            var index = getInsertionIndex ? getInsertionIndex(parent.children.map(function (p) { return p.children[0].value; })) : parent.children.length;\n            var edit = void 0;\n            if (index > 0) {\n                var previous = parent.children[index - 1];\n                edit = { offset: previous.offset + previous.length, length: 0, content: ',' + newProperty };\n            }\n            else if (parent.children.length === 0) {\n                edit = { offset: parent.offset + 1, length: 0, content: newProperty };\n            }\n            else {\n                edit = { offset: parent.offset + 1, length: 0, content: newProperty + ',' };\n            }\n            return withFormatting(text, edit, formattingOptions);\n        }\n    }\n    else if (parent.type === 'array' && typeof lastSegment === 'number' && Array.isArray(parent.children)) {\n        var insertIndex = lastSegment;\n        if (insertIndex === -1) {\n            // Insert\n            var newProperty = \"\" + JSON.stringify(value);\n            var edit = void 0;\n            if (parent.children.length === 0) {\n                edit = { offset: parent.offset + 1, length: 0, content: newProperty };\n            }\n            else {\n                var previous = parent.children[parent.children.length - 1];\n                edit = { offset: previous.offset + previous.length, length: 0, content: ',' + newProperty };\n            }\n            return withFormatting(text, edit, formattingOptions);\n        }\n        else {\n            if (value === void 0 && parent.children.length >= 0) {\n                //Removal\n                var removalIndex = lastSegment;\n                var toRemove = parent.children[removalIndex];\n                var edit = void 0;\n                if (parent.children.length === 1) {\n                    // only item\n                    edit = { offset: parent.offset + 1, length: parent.length - 2, content: '' };\n                }\n                else if (parent.children.length - 1 === removalIndex) {\n                    // last item\n                    var previous = parent.children[removalIndex - 1];\n                    var offset = previous.offset + previous.length;\n                    var parentEndOffset = parent.offset + parent.length;\n                    edit = { offset: offset, length: parentEndOffset - 2 - offset, content: '' };\n                }\n                else {\n                    edit = { offset: toRemove.offset, length: parent.children[removalIndex + 1].offset - toRemove.offset, content: '' };\n                }\n                return withFormatting(text, edit, formattingOptions);\n            }\n            else {\n                throw new Error('Array modification not supported yet');\n            }\n        }\n    }\n    else {\n        throw new Error(\"Can not add \" + (typeof lastSegment !== 'number' ? 'index' : 'property') + \" to parent of type \" + parent.type);\n    }\n    var _a;\n}\nfunction withFormatting(text, edit, formattingOptions) {\n    // apply the edit\n    var newText = applyEdit(text, edit);\n    // format the new text\n    var begin = edit.offset;\n    var end = edit.offset + edit.content.length;\n    if (edit.length === 0 || edit.content.length === 0) {\n        while (begin > 0 && !isEOL(newText, begin - 1)) {\n            begin--;\n        }\n        while (end < newText.length && !isEOL(newText, end)) {\n            end++;\n        }\n    }\n    var edits = format(newText, { offset: begin, length: end - begin }, formattingOptions);\n    // apply the formatting edits and track the begin and end offsets of the changes\n    for (var i = edits.length - 1; i >= 0; i--) {\n        var edit_1 = edits[i];\n        newText = applyEdit(newText, edit_1);\n        begin = Math.min(begin, edit_1.offset);\n        end = Math.max(end, edit_1.offset + edit_1.length);\n        end += edit_1.content.length - edit_1.length;\n    }\n    // create a single edit with all changes\n    var editLength = text.length - (newText.length - end) - begin;\n    return [{ offset: begin, length: editLength, content: newText.substring(begin, end) }];\n}\nexport function applyEdit(text, edit) {\n    return text.substring(0, edit.offset) + edit.content + text.substring(edit.offset + edit.length);\n}\nexport function isWS(text, offset) {\n    return '\\r\\n \\t'.indexOf(text.charAt(offset)) !== -1;\n}\n//# sourceMappingURL=edit.js.map","/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n'use strict';\nimport * as formatter from './impl/format.js';\nimport * as edit from './impl/edit.js';\nimport * as scanner from './impl/scanner.js';\nimport * as parser from './impl/parser.js';\n/**\n * Creates a JSON scanner on the given text.\n * If ignoreTrivia is set, whitespaces or comments are ignored.\n */\nexport var createScanner = scanner.createScanner;\n/**\n * For a given offset, evaluate the location in the JSON document. Each segment in the location path is either a property name or an array index.\n */\nexport var getLocation = parser.getLocation;\n/**\n * Parses the given text and returns the object the JSON content represents. On invalid input, the parser tries to be as fault tolerant as possible, but still return a result.\n * Therefore always check the errors list to find out if the input was valid.\n */\nexport var parse = parser.parse;\n/**\n * Parses the given text and returns a tree representation the JSON content. On invalid input, the parser tries to be as fault tolerant as possible, but still return a result.\n */\nexport var parseTree = parser.parseTree;\n/**\n * Finds the node at the given path in a JSON DOM.\n */\nexport var findNodeAtLocation = parser.findNodeAtLocation;\n/**\n * Evaluates the JavaScript object of the given JSON DOM node\n */\nexport var getNodeValue = parser.getNodeValue;\n/**\n * Parses the given text and invokes the visitor functions for each object, array and literal reached.\n */\nexport var visit = parser.visit;\n/**\n * Takes JSON with JavaScript-style comments and remove\n * them. Optionally replaces every none-newline character\n * of comments with a replaceCharacter\n */\nexport var stripComments = parser.stripComments;\n/**\n * Computes the edits needed to format a JSON document.\n *\n * @param documentText The input text\n * @param range The range to format or `undefined` to format the full content\n * @param options The formatting options\n * @returns A list of edit operations describing the formatting changes to the original document. Edits can be either inserts, replacements or\n * removals of text segments. All offsets refer to the original state of the document. No two edits must change or remove the same range of\n * text in the original document. However, multiple edits can have\n * the same offset, for example multiple inserts, or an insert followed by a remove or replace. The order in the array defines which edit is applied first.\n * To apply edits to an input, you can use `applyEdits`\n */\nexport function format(documentText, range, options) {\n    return formatter.format(documentText, range, options);\n}\n/**\n * Computes the edits needed to modify a value in the JSON document.\n *\n * @param documentText The input text\n * @param path The path of the value to change. The path represents either to the document root, a property or an array item.\n * If the path points to an non-existing property or item, it will be created.\n * @param value The new value for the specified property or item. If the value is undefined,\n * the property or item will be removed.\n * @param options Options\n * @returns A list of edit operations describing the formatting changes to the original document. Edits can be either inserts, replacements or\n * removals of text segments. All offsets refer to the original state of the document. No two edits must change or remove the same range of\n * text in the original document. However, multiple edits can have\n * the same offset, for example multiple inserts, or an insert followed by a remove or replace. The order in the array defines which edit is applied first.\n * To apply edits to an input, you can use `applyEdits`\n */\nexport function modify(text, path, value, options) {\n    return edit.setProperty(text, path, value, options.formattingOptions, options.getInsertionIndex);\n}\n/**\n * Applies edits to a input string.\n */\nexport function applyEdits(text, edits) {\n    for (var i = edits.length - 1; i >= 0; i--) {\n        text = edit.applyEdit(text, edits[i]);\n    }\n    return text;\n}\n//# sourceMappingURL=main.js.map","/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n'use strict';\nimport * as json from './_deps/jsonc-parser/main.js';\nexport function createTokenizationSupport(supportComments) {\n    return {\n        getInitialState: function () { return new JSONState(null, null, false); },\n        tokenize: function (line, state, offsetDelta, stopAtOffset) { return tokenize(supportComments, line, state, offsetDelta, stopAtOffset); }\n    };\n}\nexport var TOKEN_DELIM_OBJECT = 'delimiter.bracket.json';\nexport var TOKEN_DELIM_ARRAY = 'delimiter.array.json';\nexport var TOKEN_DELIM_COLON = 'delimiter.colon.json';\nexport var TOKEN_DELIM_COMMA = 'delimiter.comma.json';\nexport var TOKEN_VALUE_BOOLEAN = 'keyword.json';\nexport var TOKEN_VALUE_NULL = 'keyword.json';\nexport var TOKEN_VALUE_STRING = 'string.value.json';\nexport var TOKEN_VALUE_NUMBER = 'number.json';\nexport var TOKEN_PROPERTY_NAME = 'string.key.json';\nexport var TOKEN_COMMENT_BLOCK = 'comment.block.json';\nexport var TOKEN_COMMENT_LINE = 'comment.line.json';\nvar JSONState = /** @class */ (function () {\n    function JSONState(state, scanError, lastWasColon) {\n        this._state = state;\n        this.scanError = scanError;\n        this.lastWasColon = lastWasColon;\n    }\n    JSONState.prototype.clone = function () {\n        return new JSONState(this._state, this.scanError, this.lastWasColon);\n    };\n    JSONState.prototype.equals = function (other) {\n        if (other === this) {\n            return true;\n        }\n        if (!other || !(other instanceof JSONState)) {\n            return false;\n        }\n        return this.scanError === other.scanError &&\n            this.lastWasColon === other.lastWasColon;\n    };\n    JSONState.prototype.getStateData = function () {\n        return this._state;\n    };\n    JSONState.prototype.setStateData = function (state) {\n        this._state = state;\n    };\n    return JSONState;\n}());\nfunction tokenize(comments, line, state, offsetDelta, stopAtOffset) {\n    if (offsetDelta === void 0) { offsetDelta = 0; }\n    // handle multiline strings and block comments\n    var numberOfInsertedCharacters = 0, adjustOffset = false;\n    switch (state.scanError) {\n        case 2 /* UnexpectedEndOfString */:\n            line = '\"' + line;\n            numberOfInsertedCharacters = 1;\n            break;\n        case 1 /* UnexpectedEndOfComment */:\n            line = '/*' + line;\n            numberOfInsertedCharacters = 2;\n            break;\n    }\n    var scanner = json.createScanner(line), kind, ret, lastWasColon = state.lastWasColon;\n    ret = {\n        tokens: [],\n        endState: state.clone()\n    };\n    while (true) {\n        var offset = offsetDelta + scanner.getPosition(), type = '';\n        kind = scanner.scan();\n        if (kind === 17 /* EOF */) {\n            break;\n        }\n        // Check that the scanner has advanced\n        if (offset === offsetDelta + scanner.getPosition()) {\n            throw new Error('Scanner did not advance, next 3 characters are: ' + line.substr(scanner.getPosition(), 3));\n        }\n        // In case we inserted /* or \" character, we need to\n        // adjust the offset of all tokens (except the first)\n        if (adjustOffset) {\n            offset -= numberOfInsertedCharacters;\n        }\n        adjustOffset = numberOfInsertedCharacters > 0;\n        // brackets and type\n        switch (kind) {\n            case 1 /* OpenBraceToken */:\n                type = TOKEN_DELIM_OBJECT;\n                lastWasColon = false;\n                break;\n            case 2 /* CloseBraceToken */:\n                type = TOKEN_DELIM_OBJECT;\n                lastWasColon = false;\n                break;\n            case 3 /* OpenBracketToken */:\n                type = TOKEN_DELIM_ARRAY;\n                lastWasColon = false;\n                break;\n            case 4 /* CloseBracketToken */:\n                type = TOKEN_DELIM_ARRAY;\n                lastWasColon = false;\n                break;\n            case 6 /* ColonToken */:\n                type = TOKEN_DELIM_COLON;\n                lastWasColon = true;\n                break;\n            case 5 /* CommaToken */:\n                type = TOKEN_DELIM_COMMA;\n                lastWasColon = false;\n                break;\n            case 8 /* TrueKeyword */:\n            case 9 /* FalseKeyword */:\n                type = TOKEN_VALUE_BOOLEAN;\n                lastWasColon = false;\n                break;\n            case 7 /* NullKeyword */:\n                type = TOKEN_VALUE_NULL;\n                lastWasColon = false;\n                break;\n            case 10 /* StringLiteral */:\n                type = lastWasColon ? TOKEN_VALUE_STRING : TOKEN_PROPERTY_NAME;\n                lastWasColon = false;\n                break;\n            case 11 /* NumericLiteral */:\n                type = TOKEN_VALUE_NUMBER;\n                lastWasColon = false;\n                break;\n        }\n        // comments, iff enabled\n        if (comments) {\n            switch (kind) {\n                case 12 /* LineCommentTrivia */:\n                    type = TOKEN_COMMENT_LINE;\n                    break;\n                case 13 /* BlockCommentTrivia */:\n                    type = TOKEN_COMMENT_BLOCK;\n                    break;\n            }\n        }\n        ret.endState = new JSONState(state.getStateData(), scanner.getTokenError(), lastWasColon);\n        ret.tokens.push({\n            startIndex: offset,\n            scopes: type\n        });\n    }\n    return ret;\n}\n","/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n'use strict';\nimport { WorkerManager } from './workerManager.js';\nimport * as languageFeatures from './languageFeatures.js';\nimport { createTokenizationSupport } from './tokenization.js';\nexport function setupMode(defaults) {\n    var disposables = [];\n    var client = new WorkerManager(defaults);\n    disposables.push(client);\n    var worker = function () {\n        var uris = [];\n        for (var _i = 0; _i < arguments.length; _i++) {\n            uris[_i] = arguments[_i];\n        }\n        return client.getLanguageServiceWorker.apply(client, uris);\n    };\n    var languageId = defaults.languageId;\n    disposables.push(monaco.languages.registerCompletionItemProvider(languageId, new languageFeatures.CompletionAdapter(worker)));\n    disposables.push(monaco.languages.registerHoverProvider(languageId, new languageFeatures.HoverAdapter(worker)));\n    disposables.push(monaco.languages.registerDocumentSymbolProvider(languageId, new languageFeatures.DocumentSymbolAdapter(worker)));\n    disposables.push(monaco.languages.registerDocumentFormattingEditProvider(languageId, new languageFeatures.DocumentFormattingEditProvider(worker)));\n    disposables.push(monaco.languages.registerDocumentRangeFormattingEditProvider(languageId, new languageFeatures.DocumentRangeFormattingEditProvider(worker)));\n    disposables.push(new languageFeatures.DiagnosticsAdapter(languageId, worker, defaults));\n    disposables.push(monaco.languages.setTokensProvider(languageId, createTokenizationSupport(true)));\n    disposables.push(monaco.languages.setLanguageConfiguration(languageId, richEditConfiguration));\n    disposables.push(monaco.languages.registerColorProvider(languageId, new languageFeatures.DocumentColorAdapter(worker)));\n}\nvar richEditConfiguration = {\n    wordPattern: /(-?\\d*\\.\\d\\w*)|([^\\[\\{\\]\\}\\:\\\"\\,\\s]+)/g,\n    comments: {\n        lineComment: '//',\n        blockComment: ['/*', '*/']\n    },\n    brackets: [\n        ['{', '}'],\n        ['[', ']']\n    ],\n    autoClosingPairs: [\n        { open: '{', close: '}', notIn: ['string'] },\n        { open: '[', close: ']', notIn: ['string'] },\n        { open: '\"', close: '\"', notIn: ['string'] }\n    ]\n};\n"],"sourceRoot":""}